// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReyAI_Trasport.Data.Contexto;

#nullable disable

namespace Proyecto_Final.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fc3c7ad3-e33c-4609-a8ef-5d4b2834b569",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "abe174c9-fa23-4f02-87b4-872223d79719",
                            Name = "Taxista",
                            NormalizedName = "TAXISTA"
                        },
                        new
                        {
                            Id = "2d8128c9-ff19-42ec-8d55-2eaed2a995e1",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Proyecto_Final.Data.Models.CiudadesEstados", b =>
                {
                    b.Property<int>("EstadosCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadosCId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadosCId");

                    b.ToTable("CiudadesEstados");

                    b.HasData(
                        new
                        {
                            EstadosCId = 1,
                            Descripcion = "Disponible"
                        },
                        new
                        {
                            EstadosCId = 2,
                            Descripcion = "Deshabilitado"
                        });
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CiudadId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CiudadId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.Articulos", b =>
                {
                    b.Property<int>("ArticuloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticuloId"));

                    b.Property<double>("Costo")
                        .HasColumnType("float");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Existencia")
                        .HasColumnType("int");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.HasKey("ArticuloId");

                    b.ToTable("Articulos");

                    b.HasData(
                        new
                        {
                            ArticuloId = 1,
                            Costo = 18.0,
                            Descripcion = "Botella de agua",
                            Existencia = 150,
                            Precio = 25.0
                        },
                        new
                        {
                            ArticuloId = 2,
                            Costo = 20.0,
                            Descripcion = "Jugo de naranja",
                            Existencia = 150,
                            Precio = 35.0
                        },
                        new
                        {
                            ArticuloId = 3,
                            Costo = 10.0,
                            Descripcion = "Mani",
                            Existencia = 150,
                            Precio = 30.0
                        },
                        new
                        {
                            ArticuloId = 4,
                            Costo = 15.0,
                            Descripcion = "FritoLay",
                            Existencia = 150,
                            Precio = 35.0
                        },
                        new
                        {
                            ArticuloId = 5,
                            Costo = 2.0,
                            Descripcion = "Mentas",
                            Existencia = 250,
                            Precio = 5.0
                        });
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.Ciudades", b =>
                {
                    b.Property<int>("CiudadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CiudadId"));

                    b.Property<int>("EstadoCId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CiudadId");

                    b.HasIndex("EstadoCId");

                    b.ToTable("Ciudades");

                    b.HasData(
                        new
                        {
                            CiudadId = 1,
                            EstadoCId = 1,
                            Nombre = "San Francisco de Macoris"
                        },
                        new
                        {
                            CiudadId = 2,
                            EstadoCId = 1,
                            Nombre = "Santo Domingo"
                        },
                        new
                        {
                            CiudadId = 3,
                            EstadoCId = 1,
                            Nombre = "Santigo"
                        },
                        new
                        {
                            CiudadId = 4,
                            EstadoCId = 1,
                            Nombre = "Samana"
                        },
                        new
                        {
                            CiudadId = 5,
                            EstadoCId = 1,
                            Nombre = "Puerto Plata"
                        });
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.DestinosCerca", b =>
                {
                    b.Property<int>("DestinoCercaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DestinoCercaId"));

                    b.Property<int>("CiudadId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DestinoCercaId");

                    b.HasIndex("CiudadId");

                    b.ToTable("DestinosCerca");

                    b.HasData(
                        new
                        {
                            DestinoCercaId = 1,
                            CiudadId = 1,
                            Descripcion = "Parque Duarte"
                        },
                        new
                        {
                            DestinoCercaId = 2,
                            CiudadId = 1,
                            Descripcion = "La sirena"
                        },
                        new
                        {
                            DestinoCercaId = 3,
                            CiudadId = 1,
                            Descripcion = "Supermercado Bravo"
                        },
                        new
                        {
                            DestinoCercaId = 4,
                            CiudadId = 1,
                            Descripcion = "El mercado"
                        });
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.EstadosResrvaciones", b =>
                {
                    b.Property<int>("EstadosRId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadosRId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadosRId");

                    b.ToTable("EstadosResrvaciones");

                    b.HasData(
                        new
                        {
                            EstadosRId = 1,
                            Descripcion = "Pendiente"
                        },
                        new
                        {
                            EstadosRId = 2,
                            Descripcion = "Aceptada"
                        },
                        new
                        {
                            EstadosRId = 3,
                            Descripcion = "Cancelada"
                        });
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.EstadosTaxistas", b =>
                {
                    b.Property<int>("EstadoTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadoTId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadoTId");

                    b.ToTable("EstadosTaxistas");

                    b.HasData(
                        new
                        {
                            EstadoTId = 1,
                            Descripcion = "Disponible"
                        },
                        new
                        {
                            EstadoTId = 2,
                            Descripcion = "Ocupado"
                        },
                        new
                        {
                            EstadoTId = 3,
                            Descripcion = "Despedido"
                        });
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.EstadosViajes", b =>
                {
                    b.Property<int>("EstadosVId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadosVId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadosVId");

                    b.ToTable("EstadosViajes");

                    b.HasData(
                        new
                        {
                            EstadosVId = 1,
                            Descripcion = "Disponible"
                        },
                        new
                        {
                            EstadosVId = 2,
                            Descripcion = "En Curso"
                        },
                        new
                        {
                            EstadosVId = 3,
                            Descripcion = "Completado"
                        },
                        new
                        {
                            EstadosVId = 4,
                            Descripcion = "Cancelado"
                        });
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.MetodosPagos", b =>
                {
                    b.Property<int>("MetodoPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetodoPagoId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MetodoPagoId");

                    b.ToTable("MetodosPagos");

                    b.HasData(
                        new
                        {
                            MetodoPagoId = 1,
                            Descripcion = "Tarjeta de credito"
                        });
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.Pagos", b =>
                {
                    b.Property<int>("PagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PagoId"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<double>("Monto")
                        .HasColumnType("float");

                    b.Property<int>("ReservacionId")
                        .HasColumnType("int");

                    b.HasKey("PagoId");

                    b.HasIndex("ReservacionId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.ReservacionDetalles", b =>
                {
                    b.Property<int>("DetalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetalleId"));

                    b.Property<int>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<double>("Costo")
                        .HasColumnType("float");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("ReservacionId")
                        .HasColumnType("int");

                    b.HasKey("DetalleId");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("ReservacionId");

                    b.ToTable("ReservacionDetalles");
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.Reservaciones", b =>
                {
                    b.Property<int>("ReservacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservacionId"));

                    b.Property<int>("CantidadPasajeros")
                        .HasColumnType("int");

                    b.Property<string>("ClienteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<double>("Monto")
                        .HasColumnType("float");

                    b.Property<bool>("Pago")
                        .HasColumnType("bit");

                    b.Property<string>("Recibo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViajeId")
                        .HasColumnType("int");

                    b.HasKey("ReservacionId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("ViajeId");

                    b.ToTable("Reservaciones");
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.ViajesRapidos", b =>
                {
                    b.Property<int>("ViajeRapidoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViajeRapidoId"));

                    b.Property<string>("ClienteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DestinoCercaId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoVId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<string>("TaxistaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("personas")
                        .HasColumnType("int");

                    b.HasKey("ViajeRapidoId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("DestinoCercaId");

                    b.HasIndex("EstadoVId");

                    b.HasIndex("TaxistaId");

                    b.ToTable("ViajesRapidos");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Imagen", b =>
                {
                    b.Property<int>("ImagenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImagenId"));

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Base64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViajeId")
                        .HasColumnType("int");

                    b.HasKey("ImagenId");

                    b.HasIndex("ViajeId");

                    b.ToTable("Imagen");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Viajes", b =>
                {
                    b.Property<int>("ViajeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViajeId"));

                    b.Property<string>("ClientesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Destino")
                        .HasColumnType("int");

                    b.Property<int>("EstadoVId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCierre")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<string>("TaxistaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("personas")
                        .HasColumnType("int");

                    b.HasKey("ViajeId");

                    b.HasIndex("ClientesId");

                    b.HasIndex("Destino");

                    b.HasIndex("EstadoVId");

                    b.HasIndex("TaxistaId");

                    b.ToTable("Viajes");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Clientes", b =>
                {
                    b.HasBaseType("ReyAI_Trasport.Data.ApplicationUser");

                    b.HasDiscriminator().HasValue("Clientes");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Taxistas", b =>
                {
                    b.HasBaseType("ReyAI_Trasport.Data.ApplicationUser");

                    b.Property<int>("EstadoTId")
                        .HasColumnType("int");

                    b.Property<bool>("ExisteLicencia")
                        .HasColumnType("bit");

                    b.Property<bool>("ExisteVehiculo")
                        .HasColumnType("bit");

                    b.HasIndex("EstadoTId");

                    b.HasDiscriminator().HasValue("Taxistas");

                    b.HasData(
                        new
                        {
                            Id = "3f68a960-c144-4d7c-a701-cf8350a61ac3",
                            AccessFailedCount = 0,
                            CiudadId = 1,
                            ConcurrencyStamp = "a2ff9165-1d3b-4004-9aec-b74de9a4f247",
                            Email = "juanperez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "hashedpassword123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d17121be-30ff-41bb-8173-61b7c953c397",
                            TwoFactorEnabled = false,
                            UserName = "juanperez",
                            EstadoTId = 1,
                            ExisteLicencia = true,
                            ExisteVehiculo = true
                        },
                        new
                        {
                            Id = "80f12025-8790-449a-bb77-d62b451b691c",
                            AccessFailedCount = 0,
                            CiudadId = 3,
                            ConcurrencyStamp = "39bd8f4d-a078-4cc7-aedb-383c3fd18ed7",
                            Email = "mariagonzalez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "hashedpassword456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "801b2074-97d5-47a0-8fc9-943ebb3390de",
                            TwoFactorEnabled = false,
                            UserName = "mariagonzalez",
                            EstadoTId = 1,
                            ExisteLicencia = true,
                            ExisteVehiculo = true
                        },
                        new
                        {
                            Id = "4715baf7-17ed-48a0-9487-66b2a85911ba",
                            AccessFailedCount = 0,
                            CiudadId = 2,
                            ConcurrencyStamp = "bd9b473f-586d-4c03-906e-326f7bd1a81e",
                            Email = "carlosmendoza@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "hashedpassword789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f49c0bde-86cb-412e-b8d2-0e6d651e208d",
                            TwoFactorEnabled = false,
                            UserName = "carlosmendoza",
                            EstadoTId = 1,
                            ExisteLicencia = true,
                            ExisteVehiculo = true
                        },
                        new
                        {
                            Id = "c14902ca-996d-4226-ab9b-f201d8f3c60d",
                            AccessFailedCount = 0,
                            CiudadId = 2,
                            ConcurrencyStamp = "c9d76042-b868-4cb6-b6ab-1f9624c96356",
                            Email = "luismartinez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "hashedpassword101",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5ae1d77-1466-4668-b813-7116e12f530e",
                            TwoFactorEnabled = false,
                            UserName = "luismartinez",
                            EstadoTId = 1,
                            ExisteLicencia = true,
                            ExisteVehiculo = true
                        },
                        new
                        {
                            Id = "81ec052d-de93-4945-bb71-a81dcd2d2242",
                            AccessFailedCount = 0,
                            CiudadId = 1,
                            ConcurrencyStamp = "30ffd1ac-988f-402d-a8b7-20f2460d2db1",
                            Email = "anafernandez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "hashedpassword102",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "079e5e89-0663-4612-89af-c9499652aeb9",
                            TwoFactorEnabled = false,
                            UserName = "anafernandez",
                            EstadoTId = 1,
                            ExisteLicencia = true,
                            ExisteVehiculo = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.ApplicationUser", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.Models.Ciudades", "Ciudad")
                        .WithMany()
                        .HasForeignKey("CiudadId");

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.Ciudades", b =>
                {
                    b.HasOne("Proyecto_Final.Data.Models.CiudadesEstados", "CiudadesEstados")
                        .WithMany()
                        .HasForeignKey("EstadoCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CiudadesEstados");
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.DestinosCerca", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.Models.Ciudades", "Ciudad")
                        .WithMany()
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.Pagos", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.Models.Reservaciones", "Reservacion")
                        .WithMany()
                        .HasForeignKey("ReservacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservacion");
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.ReservacionDetalles", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.Models.Articulos", "Articulo")
                        .WithMany()
                        .HasForeignKey("ArticuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReyAI_Trasport.Data.Models.Reservaciones", "Reservacion")
                        .WithMany("ReservacionDetalles")
                        .HasForeignKey("ReservacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Articulo");

                    b.Navigation("Reservacion");
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.Reservaciones", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("ReyAI_Trasport.Data.Models.EstadosResrvaciones", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReyAI_Trasport.Domain.Models.Viajes", "Viaje")
                        .WithMany()
                        .HasForeignKey("ViajeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Estado");

                    b.Navigation("Viaje");
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.ViajesRapidos", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("ReyAI_Trasport.Data.Models.DestinosCerca", "DestinoCerca")
                        .WithMany()
                        .HasForeignKey("DestinoCercaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReyAI_Trasport.Data.Models.EstadosViajes", "EstadoViaje")
                        .WithMany()
                        .HasForeignKey("EstadoVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", "Taxista")
                        .WithMany()
                        .HasForeignKey("TaxistaId");

                    b.Navigation("Cliente");

                    b.Navigation("DestinoCerca");

                    b.Navigation("EstadoViaje");

                    b.Navigation("Taxista");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Imagen", b =>
                {
                    b.HasOne("ReyAI_Trasport.Domain.Models.Viajes", "Viaje")
                        .WithMany("Imagen")
                        .HasForeignKey("ViajeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Viaje");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Viajes", b =>
                {
                    b.HasOne("ReyAI_Trasport.Domain.Models.Clientes", null)
                        .WithMany("Viajes")
                        .HasForeignKey("ClientesId");

                    b.HasOne("ReyAI_Trasport.Data.Models.Ciudades", "Ciudad")
                        .WithMany()
                        .HasForeignKey("Destino")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReyAI_Trasport.Data.Models.EstadosViajes", "EstadoViaje")
                        .WithMany()
                        .HasForeignKey("EstadoVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", "Taxista")
                        .WithMany()
                        .HasForeignKey("TaxistaId");

                    b.Navigation("Ciudad");

                    b.Navigation("EstadoViaje");

                    b.Navigation("Taxista");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Taxistas", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.Models.EstadosTaxistas", "EstadoTaxista")
                        .WithMany()
                        .HasForeignKey("EstadoTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoTaxista");
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.Reservaciones", b =>
                {
                    b.Navigation("ReservacionDetalles");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Viajes", b =>
                {
                    b.Navigation("Imagen");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Clientes", b =>
                {
                    b.Navigation("Viajes");
                });
#pragma warning restore 612, 618
        }
    }
}
