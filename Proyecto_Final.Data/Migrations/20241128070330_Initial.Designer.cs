// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReyAI_Trasport.Data.Contexto;

#nullable disable

namespace Proyecto_Final.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241128070330_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7279a2c9-95c4-4b2b-8c7e-905e9fb6aeb0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "269b1aec-c431-4830-b2f1-6a0443b73b0d",
                            Name = "Taxista",
                            NormalizedName = "TAXISTA"
                        },
                        new
                        {
                            Id = "cd211c4f-13ac-4b08-a044-f2d8d89a29e9",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CiudadId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CiudadId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.Ciudades", b =>
                {
                    b.Property<int>("CiudadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CiudadId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CiudadId");

                    b.ToTable("Ciudades");

                    b.HasData(
                        new
                        {
                            CiudadId = 1,
                            Nombre = "San Francisco de Macoris"
                        },
                        new
                        {
                            CiudadId = 2,
                            Nombre = "Santo Domingo"
                        },
                        new
                        {
                            CiudadId = 3,
                            Nombre = "Santigo"
                        },
                        new
                        {
                            CiudadId = 4,
                            Nombre = "Samana"
                        },
                        new
                        {
                            CiudadId = 5,
                            Nombre = "Puerto Plata"
                        });
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.DestinosCerca", b =>
                {
                    b.Property<int>("DestinoCercaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DestinoCercaId"));

                    b.Property<int>("CiudadId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DestinoCercaId");

                    b.HasIndex("CiudadId");

                    b.ToTable("DestinosCerca");

                    b.HasData(
                        new
                        {
                            DestinoCercaId = 1,
                            CiudadId = 1,
                            Descripcion = "Parque Duarte"
                        },
                        new
                        {
                            DestinoCercaId = 2,
                            CiudadId = 1,
                            Descripcion = "La sirena"
                        },
                        new
                        {
                            DestinoCercaId = 3,
                            CiudadId = 1,
                            Descripcion = "Supermercado Bravo"
                        },
                        new
                        {
                            DestinoCercaId = 4,
                            CiudadId = 1,
                            Descripcion = "El mercado"
                        });
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.EstadosTaxistas", b =>
                {
                    b.Property<int>("EstadoTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadoTId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadoTId");

                    b.ToTable("EstadosTaxistas");

                    b.HasData(
                        new
                        {
                            EstadoTId = 1,
                            Descripcion = "Disponible"
                        },
                        new
                        {
                            EstadoTId = 2,
                            Descripcion = "Ocupado"
                        });
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.EstadosViajes", b =>
                {
                    b.Property<int>("EstadosVId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadosVId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadosVId");

                    b.ToTable("EstadosViajes");

                    b.HasData(
                        new
                        {
                            EstadosVId = 1,
                            Descripcion = "Pendiente"
                        },
                        new
                        {
                            EstadosVId = 2,
                            Descripcion = "En Curso"
                        },
                        new
                        {
                            EstadosVId = 3,
                            Descripcion = "Completado"
                        },
                        new
                        {
                            EstadosVId = 4,
                            Descripcion = "Cancelado"
                        });
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.MetodosPagos", b =>
                {
                    b.Property<int>("MetodoPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetodoPagoId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MetodoPagoId");

                    b.ToTable("MetodosPagos");

                    b.HasData(
                        new
                        {
                            MetodoPagoId = 1,
                            Descripcion = "Efectivo"
                        },
                        new
                        {
                            MetodoPagoId = 2,
                            Descripcion = "Tarjeta de credito"
                        });
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.Reservaciones", b =>
                {
                    b.Property<int>("ReservacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservacionId"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Pago")
                        .HasColumnType("bit");

                    b.Property<string>("Recibo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViajeId")
                        .HasColumnType("int");

                    b.HasKey("ReservacionId");

                    b.HasIndex("ViajeId");

                    b.ToTable("Reservaciones");
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.ViajesRapidos", b =>
                {
                    b.Property<int>("ViajeRapidoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViajeRapidoId"));

                    b.Property<string>("ClienteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DestinoCercaId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoVId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<string>("TaxistaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("personas")
                        .HasColumnType("int");

                    b.HasKey("ViajeRapidoId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("DestinoCercaId");

                    b.HasIndex("EstadoVId");

                    b.HasIndex("TaxistaId");

                    b.ToTable("ViajesRapidos");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Imagen", b =>
                {
                    b.Property<int>("ImagenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImagenId"));

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Base64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViajeId")
                        .HasColumnType("int");

                    b.HasKey("ImagenId");

                    b.HasIndex("ViajeId");

                    b.ToTable("Imagen");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Viajes", b =>
                {
                    b.Property<int>("ViajeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViajeId"));

                    b.Property<string>("ClienteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Destino")
                        .HasColumnType("int");

                    b.Property<int>("EstadoVId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<string>("TaxistaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("personas")
                        .HasColumnType("int");

                    b.HasKey("ViajeId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ClientesId");

                    b.HasIndex("EstadoVId");

                    b.HasIndex("TaxistaId");

                    b.ToTable("Viajes");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Clientes", b =>
                {
                    b.HasBaseType("ReyAI_Trasport.Data.ApplicationUser");

                    b.HasDiscriminator().HasValue("Clientes");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Taxistas", b =>
                {
                    b.HasBaseType("ReyAI_Trasport.Data.ApplicationUser");

                    b.Property<int>("EstadoTId")
                        .HasColumnType("int");

                    b.Property<bool>("ExisteLicencia")
                        .HasColumnType("bit");

                    b.Property<bool>("ExisteVehiculo")
                        .HasColumnType("bit");

                    b.HasIndex("EstadoTId");

                    b.HasDiscriminator().HasValue("Taxistas");

                    b.HasData(
                        new
                        {
                            Id = "d7c67acf-9a2c-4d25-a974-a311c095241c",
                            AccessFailedCount = 0,
                            CiudadId = 1,
                            ConcurrencyStamp = "d49ddcf7-b4c0-4efc-a5d4-9005d8c3294e",
                            Email = "juanperez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "hashedpassword123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fcefd1f5-2d43-4521-b77e-0fd1a8de2344",
                            TwoFactorEnabled = false,
                            UserName = "juanperez",
                            EstadoTId = 1,
                            ExisteLicencia = true,
                            ExisteVehiculo = true
                        },
                        new
                        {
                            Id = "51734258-7f5c-4479-80bf-365e4b2930e3",
                            AccessFailedCount = 0,
                            CiudadId = 3,
                            ConcurrencyStamp = "7b25c117-c1c2-4a11-bb40-6ccd554e6700",
                            Email = "mariagonzalez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "hashedpassword456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c03e26e-ddc0-440c-ba11-62733aa27b3b",
                            TwoFactorEnabled = false,
                            UserName = "mariagonzalez",
                            EstadoTId = 1,
                            ExisteLicencia = true,
                            ExisteVehiculo = true
                        },
                        new
                        {
                            Id = "e08e2475-6cd1-4f43-8f40-d771af2e4131",
                            AccessFailedCount = 0,
                            CiudadId = 2,
                            ConcurrencyStamp = "afe87f32-9211-4028-bb25-9d3dd49bad39",
                            Email = "carlosmendoza@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "hashedpassword789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "292be613-5cb1-4245-9eae-d07af7744bfc",
                            TwoFactorEnabled = false,
                            UserName = "carlosmendoza",
                            EstadoTId = 1,
                            ExisteLicencia = true,
                            ExisteVehiculo = true
                        },
                        new
                        {
                            Id = "0ec518ee-8998-4763-8644-dd25d9b9a4c7",
                            AccessFailedCount = 0,
                            CiudadId = 2,
                            ConcurrencyStamp = "c957d859-0f3f-4a8e-89c6-f5b20a03084e",
                            Email = "luismartinez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "hashedpassword101",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da6a0311-5c45-4ad0-bd8c-8a72cd04f493",
                            TwoFactorEnabled = false,
                            UserName = "luismartinez",
                            EstadoTId = 1,
                            ExisteLicencia = true,
                            ExisteVehiculo = true
                        },
                        new
                        {
                            Id = "838f3d2b-ff85-45b3-a4fa-84ecc58f31a8",
                            AccessFailedCount = 0,
                            CiudadId = 1,
                            ConcurrencyStamp = "2e5083bb-12a9-4ba3-ad1a-662f109ac84d",
                            Email = "anafernandez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "hashedpassword102",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49d800fe-546c-4f5f-9f2e-cb1c0c99d4a1",
                            TwoFactorEnabled = false,
                            UserName = "anafernandez",
                            EstadoTId = 1,
                            ExisteLicencia = true,
                            ExisteVehiculo = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.ApplicationUser", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.Models.Ciudades", "Ciudad")
                        .WithMany()
                        .HasForeignKey("CiudadId");

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.DestinosCerca", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.Models.Ciudades", "Ciudad")
                        .WithMany()
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.Reservaciones", b =>
                {
                    b.HasOne("ReyAI_Trasport.Domain.Models.Viajes", "Viaje")
                        .WithMany()
                        .HasForeignKey("ViajeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Viaje");
                });

            modelBuilder.Entity("ReyAI_Trasport.Data.Models.ViajesRapidos", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("ReyAI_Trasport.Data.Models.DestinosCerca", "DestinoCerca")
                        .WithMany()
                        .HasForeignKey("DestinoCercaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReyAI_Trasport.Data.Models.EstadosViajes", "EstadoViaje")
                        .WithMany()
                        .HasForeignKey("EstadoVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", "Taxista")
                        .WithMany()
                        .HasForeignKey("TaxistaId");

                    b.Navigation("Cliente");

                    b.Navigation("DestinoCerca");

                    b.Navigation("EstadoViaje");

                    b.Navigation("Taxista");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Imagen", b =>
                {
                    b.HasOne("ReyAI_Trasport.Domain.Models.Viajes", "Viaje")
                        .WithMany("Imagen")
                        .HasForeignKey("ViajeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Viaje");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Viajes", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("ReyAI_Trasport.Domain.Models.Clientes", null)
                        .WithMany("Viajes")
                        .HasForeignKey("ClientesId");

                    b.HasOne("ReyAI_Trasport.Data.Models.EstadosViajes", "EstadoViaje")
                        .WithMany()
                        .HasForeignKey("EstadoVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReyAI_Trasport.Data.ApplicationUser", "Taxista")
                        .WithMany()
                        .HasForeignKey("TaxistaId");

                    b.Navigation("Cliente");

                    b.Navigation("EstadoViaje");

                    b.Navigation("Taxista");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Taxistas", b =>
                {
                    b.HasOne("ReyAI_Trasport.Data.Models.EstadosTaxistas", "EstadoTaxista")
                        .WithMany()
                        .HasForeignKey("EstadoTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoTaxista");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Viajes", b =>
                {
                    b.Navigation("Imagen");
                });

            modelBuilder.Entity("ReyAI_Trasport.Domain.Models.Clientes", b =>
                {
                    b.Navigation("Viajes");
                });
#pragma warning restore 612, 618
        }
    }
}
