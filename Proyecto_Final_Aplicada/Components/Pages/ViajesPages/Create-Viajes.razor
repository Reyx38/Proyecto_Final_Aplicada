@page "/Viajes/Create"
@rendermode InteractiveServer
@inject ViajeServices ViajeService
@inject TaxistaServices TaxistaService
<EditForm Model="@Viajes" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />
    <div class="overlay"></div>
    <div class="container">
        <div class="card">
            <div class="card-header">
                <h2>Crear Viaje</h2>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-12">
                        <label class="form-label">Seleccionar conductor:</label>
                        <InputSelect class="form-select" @bind-Value="Viajes.TaxistaId">
                            @foreach (var taxista in ListTaxista)
                            {
                                <option value="@taxista.TaxistaId">@taxista.NickName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => Viajes.TaxistaId)" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-12">
                        <label class="form-label">Destino</label>
                        <InputText class="form-control" @bind-Value="@Viajes.Destino" placeholder="Santo Domingo - Zona Colonial"></InputText>
                        <ValidationMessage For="@(() => Viajes.Destino)" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label class="form-label">Fecha</label>
                        <InputDate class="form-control" @bind-Value="Viajes.Fecha" />
                        <ValidationMessage For="@(() => Viajes.Fecha)" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Costo de viaje</label>
                        <InputNumber class="form-control" @bind-Value="@Viajes.Precio" placeholder="80000.00$"></InputNumber>
                        <ValidationMessage For="@(() => Viajes.Precio)" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Cantidad de personas</label>
                        <InputNumber class="form-control" @bind-Value="@Viajes.personas" placeholder="20"></InputNumber>
                        <ValidationMessage For="@(() => Viajes.personas)" />
                    </div>
                </div>
                <div class="row">
                    <InputFile class="form-select" multiple OnChange="AgregarImagenes"></InputFile>

                </div>
                @foreach(var im in Viajes.Imagenes)
                {
                    <img src="@im.Base64" alt="@im.Alt" title="@im.Titulo" style="max-width: 200px; margin: 5px;" />
                }
            </div>
        </div>
    </div>

</EditForm>

<style>
    body{
        margin: 0;
        justify-content: center;
        align-items: center;
        position: relative;
        background-image: url("/Imagenes/RD.jpg"); 
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
    }

    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 148.5%;
        background-color: rgba(0, 0, 0, 0.4);
        z-index: 1;
    }

    .container {
        position: relative;
        z-index: 2; 
        background:fixed;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
    }
    
</style>

@code {
    public List<TaxistaDto> ListTaxista { get; set; } = new List<TaxistaDto>();
    public Viajes Viajes { get; set; } = new Viajes();

    protected override async Task OnInitializedAsync()
    {
        ListTaxista = await TaxistaService.Listar(T => true);
    }

    public void Guardar(){}
    public async Task AgregarImagenes(InputFileChangeEventArgs e)
    {
        foreach (var f in e.GetMultipleFiles())
        {
            using var stream = f.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);

            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            var tipo = f.ContentType; 

            var base64Url = $"data:{tipo};base64,{base64}";

           
            var nuevaImagen = new Imagen
                {
                    ImagenUrl = f.Name, 
                    Base64 = base64Url, 
                    Alt = "Imagen subida", 
                    Titulo = f.Name
                };

            Viajes.Imagenes.Add(nuevaImagen);

        }
    }
}
