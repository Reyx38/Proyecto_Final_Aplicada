@page "/Viajes/Create"
@using ReyAI_Trasport.Domain.Dto
@using ReyAI_Trasport.Services.Services
<link rel="stylesheet" href="/Estilos/Viajes/Crear.css" />
@rendermode InteractiveServer
@* @inject ViajeServices ViajeService
@inject TaxistaServices TaxistaService*@
<EditForm Model="@Viajes" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />
	<div class="overlay"></div>
	<div class="container">
		<div class="card">
			<div class="card-header">
				<h2>Crear Viaje</h2>
			</div>
			<div class="card-body">
				<div class="row mb-3">
					<div class="col-12">
						<label class="form-label">Seleccionar conductor:</label>
						<InputSelect class="form-select" @bind-Value="Viajes.TaxistaId">
							<option selected disabled value="0">-- Seleccione un Conductor --</option>

							@foreach (var taxista in ListTaxista)
							{
								<option value="@taxista.TaxistaId">@taxista.NickName</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => Viajes.TaxistaId)" />
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-12">
						<label class="form-label">Destino</label>
						<InputText class="form-control" @bind-Value="@Viajes.Destino" placeholder="Santo Domingo - Zona Colonial"></InputText>
						<ValidationMessage For="@(() => Viajes.Destino)" />
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-md-4">
						<label class="form-label">Fecha</label>
						<InputDate class="form-control" @bind-Value="Viajes.Fecha" />
						<ValidationMessage For="@(() => Viajes.Fecha)" />
					</div>
					<div class="col-md-4">
						<label class="form-label">Costo de viaje</label>
						<InputNumber class="form-control" @bind-Value="@Viajes.Precio" placeholder="80000.00$"></InputNumber>
						<ValidationMessage For="@(() => Viajes.Precio)" />
					</div>
					<div class="col-md-4">
						<label class="form-label">Cantidad de personas</label>
						<InputNumber class="form-control" @bind-Value="@Viajes.personas" placeholder="20"></InputNumber>
						<ValidationMessage For="@(() => Viajes.personas)" />
					</div>
				</div>
				<div class="row">
					<label class="formFileMultiple">Insertar Imagenes del sitio</label>
					<InputFile class="form-control" multiple OnChange="AgregarImagenes"></InputFile>
						
					<table class="table table-hover text-center mt-3">
						<thead class="table table-striped text-black">
							<tr>
								<th class="text-white"><strong>Imagenes</strong></th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td colspan="2">
									<div class="row justify-content-center">
										@foreach (var im in Viajes.Imagenes)
										{
											<div class="col-2 mb-3 text-center">
												<img src="@im.Base64" alt="@im.Alt" title="@im.Titulo" class="img-fluid" />
												<button @onclick="() => RemoverDetalle(im)" class="btn btn-danger bi bi-trash mt-2">Remover</button>
											</div>
										}
									</div>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
				<div class="card-footer">
					<button type="submit" class="btn btn-danger bi bi-trash mt-2">Guardar</button>
					<a href="/" class="btn btn-light bi bi-arrow-left-square "> Volver</a>

				</div>
			</div>
		</div>
	</div>

</EditForm>



@code {
	public List<TaxistaDto> ListTaxista { get; set; } = new List<TaxistaDto>();
	public ViajesDto Viajes { get; set; } = new ViajesDto();

	// protected override async Task OnInitializedAsync()
	// {
	// 	ListTaxista = await TaxistaService.Listar(T => true);
	// }

	public void Guardar() { }
	public async Task AgregarImagenes(InputFileChangeEventArgs e)
	{
		foreach (var f in e.GetMultipleFiles())
		{
			using var stream = f.OpenReadStream();
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);

			var base64 = Convert.ToBase64String(memoryStream.ToArray());
			var tipo = f.ContentType;

			var base64Url = $"data:{tipo};base64,{base64}";


			var nuevaImagen = new ImagenDto
				{
					ImagenUrl = f.Name,
					Base64 = base64Url,
					Alt = "Imagen subida",
					Titulo = f.Name
				};

			Viajes.Imagenes.Add(nuevaImagen);

		}
	}
	private void RemoverDetalle(ImagenDto im)
	{
		throw new NotImplementedException();
	}
}