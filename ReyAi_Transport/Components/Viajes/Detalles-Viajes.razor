@page "/Viajes/Detalles/{ViajeId:int}"
@using Proyecto_Final.Services.Services
<link rel="stylesheet" href="/Estilos/Viajes/ViajesDetalles.css" />

@rendermode InteractiveServer

@inject ViajeServices ViajeService
@inject CiudadServices CiudadesService
@inject TaxistaServices taxistasService
@inject EstadoServices EstadoServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ToastService Toast
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />
<div class="container">
	<div class="overlay">
		<div class="detalles-container">
			<h2 class="titulo">Detalles del Viaje</h2>

			<div class="destino-info">
				<h3>¡Ven con nosotros a <span class="ciudad">@CiudadDto.Nombre</span>!</h3>
			</div>

			<div id="carouselExampleInterval" class="carousel slide" data-bs-ride="carousel">
				<div class="carousel-inner">
					@foreach (var imagen in Viaje.Imagenes)
					{
						<div class="carousel-item @(imagen == Viaje.Imagenes.First() ? "active" : "")" data-bs-interval="3000">
							<img src="@imagen.Base64" class="d-block w-100" alt="Imagen del viaje">
						</div>
					}
				</div>
				<button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleInterval" data-bs-slide="prev">
					<span class="carousel-control-prev-icon" aria-hidden="true"></span>
					<span class="visually-hidden">Anterior</span>
				</button>
				<button class="carousel-control-next" type="button" data-bs-target="#carouselExampleInterval" data-bs-slide="next">
					<span class="carousel-control-next-icon" aria-hidden="true"></span>
					<span class="visually-hidden">Siguiente</span>
				</button>
			</div>

			<div class="informacion-adicional">
				<p>Descripicion: <br /> @Viaje.Descripcion</p>
				<p class="f small">
					Fecha de inicio-Fecha de cierre <br />
					@Viaje.FechaInicio.ToString("dd/MM/yyyy") --- @Viaje.FechaCierre.ToString("dd/MM/yyyy")
				</p>
				<p class="taxista">Taxista asignado: <span>@TaxistaDto.NickName</span></p>
				<p class="estado">Estado del viaje: <span>@EstadosViajesDto.Descripcion</span></p>
				<p class="precio">Precio por persona:DOP  $<span>@Viaje.Precio.ToString("N2")</span> </p>
			</div>
			<div class="row">
				<AuthorizeView Roles="Admin">
					<div class="col">
						<button type="button" @onclick="AbrirModalDespedir" class="button">
							<i class="bi bi-trash"></i>
							<span class="lable">Eliminar</span>
						</button>
					</div>
					<div class="col">
						<button type="button" @onclick="() => Editar(Viaje.ViajeId)" class="text-white btn btn-info" style="color:#00b7c5;">
							<i class="bi bi-pencil-square"></i>
							<span class="lable">Editar</span>
						</button>
					</div>
				</AuthorizeView>
				<div class="col">
					<button type="button" @onclick="() => Reservar(Viaje.ViajeId)" class="button">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" viewBox="0 0 24 24" height="24" fill="none" class="svg-icon"><g stroke-width="2" stroke-linecap="round" stroke="#fff"><rect y="5" x="4" width="16" rx="2" height="16"></rect><path d="m8 3v4"></path><path d="m16 3v4"></path><path d="m4 11h16"></path></g></svg>
						<span class="lable">Reservar</span>
					</button>
				</div>

			</div>


		</div>
	</div>
</div>

<div class="modal fade @(MostrarModal ? "show d-block" : "d-none")" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Confirmar deshabilitar</h5>
				<button type="button" class="btn-close" @onclick="CerrarModal"></button>
			</div>
			<div class="modal-body">
				<p>¿Estás seguro de que deseas desactivar este viaje?</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
				<button type="button" class="btn btn-danger" @onclick="Eliminar">Desactivar</button>
			</div>
		</div>
	</div>
</div>


@code {
	[Parameter]
	public int ViajeId { get; set; }

	public ViajesDto Viaje { get; set; } = new ViajesDto();
	public CiudadesDto CiudadDto { get; set; } = new CiudadesDto();
	public bool MostrarModal { get; set; } = false;
	public EstadosViajesDto EstadosViajesDto { get; set; } = new EstadosViajesDto();
	public TaxistaDto TaxistaDto { get; set; } = new TaxistaDto();

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity == null && !user.Identity.IsAuthenticated)
		{
			Toast.Notify(new(ToastType.Danger, $"Usuario no autenticado"));
			await Task.Delay(2000);
			NavigationManager.NavigateTo("/Account/Login");
		}
		
		Viaje = await ViajeService.Buscar(ViajeId);
		CiudadDto = await CiudadesService.Buscar(Viaje.Destino);
		TaxistaDto = await taxistasService.Buscar(Viaje.TaxistaId);
		EstadosViajesDto = await EstadoServices.Buscar(Viaje.EstadoId);
	}
	private void AbrirModalDespedir()
	{
		MostrarModal = true;
	}
	private void CerrarModal()
	{
		MostrarModal = false;
	}

	public void Editar(int id)
	{
		NavigationManager.NavigateTo($"/Viajes/ViajesEditar/{id}");
	}

	public void Reservar(int id)
	{
		NavigationManager.NavigateTo($"/Reservacion/{id}");
	}

	private async Task Eliminar()
	{
		if (Viaje != null)
		{
			Toast.Notify(new(ToastType.Danger, $"Viaje desactivado"));
			await ViajeService.ActualizarEstado(Viaje, 4);
		}
		CerrarModal();
	}

}
