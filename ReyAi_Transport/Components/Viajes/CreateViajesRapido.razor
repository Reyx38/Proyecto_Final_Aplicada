@page "/CrearViajeRapido"

@inject ViajesRapidosServices viajesRapidosServices
@inject TaxistaServices taxistasServices
@inject ReservacionesServices reservacionService
@inject DestinosCercasServices destinosCercaService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@*Crear las notificaciones y terminar de ajustar la redireccion*@

<link rel="stylesheet" href="/Estilos/CrearViaje/StyleCrearViajes.css" />
<EditForm model="ViajeRapidoDto" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="cont glass-effect">
        <h3 style="color: white;" class="mt-2">Viajes Rapidos</h3>
        <div class="row">

            <div class="col-3">
                <label class="form-label" for="Destino"><strong>Destino</strong></label>
            </div>
            
            <div class="col-2">
                <label class="form-label" for="Personas"><strong>Personas</strong></label>
            </div>
            <div class="col-3">
                <label class="form-label" for="TaxistaId"><strong>Taxista</strong></label>
            </div>
            <div class="col-2">
                <label class="form-label" for="Precio"><strong>Precio</strong></label>
            </div>

        </div>
        <div class="row align-items-center">
            @*Destino*@
            <div class="col-3 ml-3">

                <InputSelect id="Destino" class="form-select" @bind-Value="ViajeRapidoDto.DestinoCercaId">
                    <option disabled value="0">Seleccione un destino</option>
                    @foreach (var destino in ListaDestinos)
                    {
                        <option value="@destino.DestinoCercaId">@destino.Descripcion</option>
                    }
                </InputSelect>
            </div>

            @*Número de personas*@
            <div class="col-2">
                <InputNumber id="Personas" class="form-control" @bind-Value="ViajeRapidoDto.personas" ></InputNumber>
                <ValidationMessage For="(()=> ViajeRapidoDto.personas)" />
            </div>

            @*Taxista*@
            <div class="col-3">

                <InputSelect id="TaxistaId" class="form-select" @bind-Value="ViajeRapidoDto.TaxistaId">
                    <option selected disabled value="0">-- Seleccione un conductor --</option>
                    @foreach (var taxista in ListaTaxistas)
                    {
                        <option value="@taxista.TaxistaId">@taxista.NickName</option>
                    }
                </InputSelect>
            </div>
            @if (ViajeRapidoDto.personas > 0)
            {
                CalcularMonto();
            }

            @*Precio*@
            <div class="col-2">
                <label style="color: white;" class="form-label"><strong>DOP$ @ViajeRapidoDto.Precio.ToString("N2")</strong></label>
            </div>

            <div class="col-auto">
                <button type="submit" class="btn btn-success" >Pedir Taxi</button>
            </div>

        </div>
    </div>

</EditForm>
@Mensaje
@code {
    public List<TaxistaDto> ListaTaxistas { get; set; } = new List<TaxistaDto>();
    public List<DestinoCercaDto> ListaDestinos { get; set; } = new List<DestinoCercaDto>();
    public List<ReservacionesDto> Reservaciones { get; set; } = new List<ReservacionesDto>();
    public ViajesRapidosDto ViajeRapidoDto { get; set; } = new ViajesRapidosDto();
    public string Mensaje { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            ViajeRapidoDto.ClienteId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }
        else
        {
            Mensaje = "Usuario no autenticado";
        }
        ListaDestinos = await destinosCercaService.Listar(a => true);
        ListaTaxistas = await taxistasServices.Listar(a => true);

        ViajeRapidoDto.Fecha = DateTime.Now;
    }

    private async Task<bool> Validar()
    {
        var valido = await viajesRapidosServices.
        ExisteViaje(ViajeRapidoDto.DestinoCercaId, ViajeRapidoDto.ViajeRapidoId, ViajeRapidoDto.TaxistaId);
        return valido;
    }

    private void CalcularMonto()
    {
        ViajeRapidoDto.Precio = 200 * ViajeRapidoDto.personas;
    } 

    private async Task<bool> Restriccion()
    {
        var destino = await destinosCercaService.Buscar(ViajeRapidoDto.DestinoCercaId);
        var taxista = await taxistasServices.Buscar(ViajeRapidoDto.TaxistaId);
        if(destino.CiudadId == taxista.CiudadId)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public async Task Guardar()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Verificar si el usuario no está autenticado
        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            Mensaje = "Debe iniciar sesión para guardar un viaje rápido.";
            return;
            navigationManager.NavigateTo("/Account/Login");
        }
        if(await Validar())
        {
            Mensaje = "Ya tienes un viaje";
            return;
        }
        if(await VerificarTaxista())
        {
            Mensaje = "El taxista no esta disponible";
            return;
        }
        ViajeRapidoDto.Fecha = DateTime.Now;
        ViajeRapidoDto.EstadoVId = 1;
        if(ViajeRapidoDto.personas > 0 && ViajeRapidoDto.Precio > 0 && ViajeRapidoDto.DestinoCercaId != 0 && ViajeRapidoDto.TaxistaId != null)
        {
            if (await Restriccion())
            {
                var crear = await viajesRapidosServices.Guardar(ViajeRapidoDto);
                if (crear)
                {
                    Mensaje = "Se a creado tu viaje rapido";
                }
            }
            else
            {
                Mensaje = "Taxista no es de la misma ciudad";
            }

        }
        else
        {
            Mensaje = "Ingrese todos los datos";
        }

    }

    private async Task<bool> VerificarTaxista()
    {
        Reservaciones = await reservacionService.Listar(a => true);
        foreach(var t in Reservaciones)
        {
            if(await reservacionService.ReservacionesTaxistas(t.ViajeId, ViajeRapidoDto.TaxistaId, ViajeRapidoDto.Fecha))
            {
                return false;
            }
        }
        return true;
    }
}
