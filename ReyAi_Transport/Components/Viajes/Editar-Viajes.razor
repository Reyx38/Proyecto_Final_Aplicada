@page "/Viajes/ViajesEditar/{ViajeId:int}"

@attribute [Authorize(Roles = "Admin")]

<link rel="stylesheet" href="/Estilos/Viajes/Crear.css" />
@rendermode InteractiveServer
@inject ViajeServices ViajeService
@inject TaxistaServices TaxistaService
@inject CiudadServices CiudadService
@inject NavigationManager NavigationManager
@inject ToastService Toast
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<EditForm Model="@Viajes" OnValidSubmit="Guardar" FormName="EditarViaje">
	<DataAnnotationsValidator />
	<div class="overlay"></div>
	<div class="container">
		<div class="card">
			<div class="card-header text-center">
				<h2>Crear Viaje</h2>
			</div>
			<div class="card-body">
				<div class="row mb-3">
					<div class="col-6">
						<label class="form-label">Seleccionar conductor:</label>
						<InputSelect class="form-select" @bind-Value="@Viajes.TaxistaId">
							<option selected disabled value="0">-- Seleccione un Conductor --</option>
							@foreach (var taxista in ListTaxista)
							{
								<option value="@taxista.TaxistaId">@taxista.NickName</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => Viajes.TaxistaId)" />
					</div>

					<div class="col-6">
						<label class="form-label">Destino</label>
						<InputSelect class="form-select" @bind-Value="@Viajes.Destino">
							<option selected disabled value="0">-- Seleccione un Destino --</option>
							@foreach (var ciudad in ListCiudades)
							{
								<option value="@ciudad.CiudadId">@ciudad.Nombre</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => Viajes.Destino)" />
					</div>
				</div>
				<div class="mb-3">
					<label class="form-label">Descripción de viaje</label>
					<textarea class="form-control" @bind="@Viajes.Descripcion" rows="2"></textarea>
				</div>
				<div class="row mb-3">
					<div class="col-6">
						<label class="form-label">Fecha de Inicio</label>
						<InputDate class="form-control" @bind-Value="@Viajes.FechaInicio" />
						<ValidationMessage For="@(() => Viajes.FechaInicio)" />
					</div>
					<div class="col-6">
						<label class="form-label">Fecha de Cierre</label>
						<InputDate class="form-control" @bind-Value="@Viajes.FechaCierre" />
						<ValidationMessage For="@(() => Viajes.FechaCierre)" />
					</div>
				</div>

				<div class="row mb-3">
					<div class="col-6">
						<label class="form-label">Costo por persona</label>
						<InputNumber class="form-control" @bind-Value="@Viajes.Precio" placeholder="80000.00$"></InputNumber>
						<ValidationMessage For="@(() => Viajes.Precio)" />
					</div>

					<div class="col-6">
						<label class="form-label">Límite de personas</label>
						<InputNumber class="form-control" @bind-Value="@Viajes.personas" placeholder="20"></InputNumber>
						<ValidationMessage For="@(() => Viajes.personas)" />
					</div>
				</div>

				<!-- Nueva fila para el selector de imágenes -->
				<div class="row">
					<label class="form-label">Insertar Imágenes del sitio</label>
					<InputFile class="form-control" multiple OnChange="AgregarImagenes" />
				</div>
				<div class="row">
					<table class="table table-hover text-center mt-3">
						<thead class="table table-striped text-white">
							<tr>
								<th class="text-white"><strong>Imágenes</strong></th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td colspan="2">
									<div class="row justify-content-center">
										@if (Viajes.Imagenes.Any())
										{
											@foreach (var im in Viajes.Imagenes)
											{
												<div class="col-4 mb-3 text-center">
													<img src="@im.Base64" alt="@im.Alt" title="@im.Titulo" class="img-fluid" />
													<button type="button" @onclick="() => RemoverDetalle(im)" class="bi bi-trash btn-danger">Remover</button>
												</div>
											}
										}
										else
										{
											<p class="text-white">No hay imágenes seleccionadas</p>
										}
									</div>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		</div>

		<div class="card-footer text-center">
			<a href="/" class="btn btn-light">Volver</a>
			<button type="submit" class="btn btn-Guardar bi bi-floppy"> Guardar</button>
		</div>
	</div>
</EditForm>


@code {
	[Parameter]
	public int ViajeId { get; set; }
	public List<TaxistaDto> ListTaxista { get; set; } = new List<TaxistaDto>();
	public ViajesDto Viajes { get; set; } = new ViajesDto();
	public List<CiudadesDto> ListCiudades { get; set; } = new List<CiudadesDto>();
	protected override async Task OnInitializedAsync()
	{
		Viajes = await ViajeService.Buscar(ViajeId);
		ListTaxista = await TaxistaService.Listar(T => true);
		Viajes.FechaCierre = DateTime.Now;
		Viajes.FechaInicio = DateTime.Now;
		ListCiudades = await CiudadService.Listar(T => true);
	}
	public async Task Guardar()
	{
		if (Viajes.Imagenes.Count < 1)
		{
			Console.WriteLine("Necesita agregar por lo menos 1 imagen");
			Toast.Notify(new(ToastType.Danger, $"Necesita agregar por lo menos 1 imagen"));
			await Task.Delay(3000);
			return;
		}
		else if (Viajes.Imagenes.Count > 5)
		{
			Console.WriteLine("El limite son 5 imagenes por viaje");
			Toast.Notify(new(ToastType.Danger, $"El limite son 5 imagenes por viaje"));
			await Task.Delay(3000);
			return;
		}
		await ViajeService.Guardar(Viajes);
		Toast.Notify(new(ToastType.Success, $"Viaje editado correctamente."));
		await Task.Delay(3000);
		NavigationManager.NavigateTo("/");

	}
	public async Task AgregarImagenes(InputFileChangeEventArgs e)
	{
		foreach (var f in e.GetMultipleFiles())
		{
			using var stream = f.OpenReadStream();
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);

			var base64 = Convert.ToBase64String(memoryStream.ToArray());
			var tipo = f.ContentType;

			var base64Url = $"data:{tipo};base64,{base64}";


			var nuevaImagen = new ImagenDto
				{
					ImagenUrl = f.Name,
					Base64 = base64Url,
					Alt = "Imagen subida",
					Titulo = f.Name
				};

			Viajes.Imagenes.Add(nuevaImagen);

		}
	}
	private void RemoverDetalle(ImagenDto im)
	{
		Viajes.Imagenes.Remove(im);
	}
}

