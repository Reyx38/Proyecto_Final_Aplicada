@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ReyAI_Trasport.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Email</PageTitle>

<section class="email-management-section">
    <h3 class="text-center">Email</h3>

    <StatusMessage Message="@message" />

    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <!-- Form for sending verification email -->
            <form @onsubmit="OnSendEmailVerificationAsync" id="send-verification-form" method="post">
                <AntiforgeryToken />
            </form>

            <!-- Edit Form for changing email -->
            <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <!-- Current email section -->
                <div class="current-email-section mb-4">
                    @if (isEmailConfirmed)
                    {
                        <div class="form-floating input-group">
                            <input type="text" value="@email" class="form-control" placeholder="Your email" disabled />
                            <div class="input-group-append">
                                <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
                            </div>
                            <label for="email">Cambiar Email</label>
                        </div>
                    }
                    else
                    {
                        <div class="form-floating">
                            <input type="text" value="@email" class="form-control" placeholder="Your email" disabled />
                            <label for="email">Email</label>
                        </div>
                        <button type="submit" class="btn btn-link mt-2" form="send-verification-form">
                            Enviar Verificacion Email
                        </button>
                    }
                </div>

                <!-- New email input -->
                <div class="form-floating mb-4">
                    <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" placeholder="New Email" />
                    <label for="new-email">Nuevo Email</label>
                    <ValidationMessage For="() => Input.NewEmail" class="text-danger" />
                </div>

                <!-- Submit button -->
                <button type="submit" class="btn btn-primary w-100">Cambiar Email</button>
            </EditForm>
        </div>
    </div>
</section>

<style>
    .email-management-section {
        background-color: #f8f9fa;
        padding: 2rem 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

        .email-management-section h3 {
            font-size: 1.8rem;
            font-weight: bold;
            margin-bottom: 1.5rem;
            color: #343a40;
        }

    .current-email-section .form-control {
        background-color: #e9ecef;
        border: none;
        font-weight: 500;
    }

        .current-email-section .form-control:disabled {
            opacity: 1;
        }

    .form-floating {
        position: relative;
    }

        .form-floating .form-label {
            font-size: 0.9rem;
            color: #6c757d;
        }

    /* Primary button styles (using #00b7c5) */
    .btn-primary {
        background-color: #00b7c5;
        border: none;
        transition: background-color 0.3s;
    }

        .btn-primary:hover {
            background-color: #009aa6;
        }

    /* Link button styles (using #ff6d3a) */
    .btn-link {
        font-size: 0.9rem;
        color: #ff6d3a;
        text-decoration: underline;
    }

        .btn-link:hover {
            color: #e55e2e;
        }

    /* Validation messages */
    .text-danger {
        color: #dc3545;
    }
</style>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}
