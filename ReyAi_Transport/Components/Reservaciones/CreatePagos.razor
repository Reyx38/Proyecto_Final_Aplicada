@page "/pago/{ReservacionId:int}"
@attribute [Authorize(Roles = "Cliente")]
@inject ReservacionesServices reservacionesServices
@inject PagosServices pagosServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@inject ToastService Toast
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />
<link rel="stylesheet" href="/Estilos/Viajes/ViajesDetalles.css" />

<EditForm Model="PagoDto" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container">
        <div class="overlay">
            <div class="detalles-container">
                <div class="card-header">
                    <h5 class="card-title">Realizar Pago</h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-12">
                            <label class="form-label fs-5">Codigo de la reservacion:  </label>
                            <label class="form-label fs-5 "><strong>@ReservacionDto.ReservacionId.ToString()</strong></label>
                        </div>
                        <div class="col-12">
                            <label class="form-label fs-5">Monto a pagar:  </label>
                            <label class="form-label fs-5 "><strong>DOP$ @ReservacionDto.Monto.ToString()</strong></label>
                        </div>
                    </div>
                   
                    @*Formulario*@
                    <div class="row mb-3 align-items-center">
                        @* Número de Tarjeta*@
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Número de tarjeta:</label>
                            <InputText type="password"
                                       class="form-control"
                                       @bind-Value="numeroTarjeta"
                                       placeholder="Ingrese su número de tarjeta">
                            </InputText>
                        </div>

                        @*Monto*@
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Monto:</label>
                            <InputNumber class="form-control"
                                         @bind-Value="PagoDto.Monto"
                                         placeholder="DOP$ 0.00">
                            </InputNumber>
                            <ValidationMessage For="(()=> PagoDto.Monto)" />
                        </div>
                    </div>
                    
                    <div class="card-footer">
                        <a href="/" class="btn btn-light bi bi-arrow-left-square "> Volver</a>
                        <button type="submit" class="btn btn-outline-success mt-2 bi bi-floppy"> Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>



@code {
    [Parameter]
    public int ReservacionId { get; set; }

    public ReservacionesDto ReservacionDto { get; set; } = new ReservacionesDto();
    public PagosDto PagoDto { get; set; } = new PagosDto();

    private string numeroTarjeta { get; set; } = string.Empty;
    private bool? esValido;
    public string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ReservacionDto = await reservacionesServices.Buscar(ReservacionId);
        if(ReservacionDto.EstadoId == 1 || ReservacionDto.EstadoId == 3)
        {
            Toast.Notify(new(ToastType.Warning, $"La reservacion aun no ha sido aceptada"));
            navigationManager.NavigateTo("/ListaReservaciones/Users");
        }
    }

    private void Validar()
    {
        esValido = ValidarNumeroTarjeta(numeroTarjeta);
        if (esValido.HasValue)
        {
            if (esValido.Value)
            {

                Toast.Notify(new(ToastType.Success, $"El número de tarjeta es válido."));
            }
            else
            {
                Toast.Notify(new(ToastType.Danger, $"El número de tarjeta no es válido."));
                return;
            }
        }
    }

    public bool ValidarNumeroTarjeta(string numeroTarjeta)
    {
        numeroTarjeta = numeroTarjeta.Replace(" ", "");

        if (numeroTarjeta.Length < 13 || numeroTarjeta.Length > 19 || !numeroTarjeta.All(char.IsDigit))
        {
            return false;
        }

        int suma = 0;
        bool esPar = false;

        for (int i = numeroTarjeta.Length - 1; i >= 0; i--)
        {
            int digito = int.Parse(numeroTarjeta[i].ToString());

            if (esPar)
            {
                digito *= 2;

                if (digito > 9)
                {
                    digito -= 9;
                }
            }

            suma += digito;
            esPar = !esPar;
        }

        return suma % 10 == 0;
    }

    private async Task<bool> ValidarExistencia()
    {
        var valido = await pagosServices.ExistePago(PagoDto.PagoId, PagoDto.ReservacionId);
        return valido;
    }


    private async Task Guardar()
    {
        Validar();
        if (esValido != true) // Si no es válido o no tiene valor
        {
            Toast.Notify(new(ToastType.Danger, "El número de tarjeta no es válido."));
            return;
        }

        if (PagoDto.Monto > ReservacionDto.Monto || PagoDto.Monto < ReservacionDto.Monto)
        {
            Toast.Notify(new(ToastType.Danger, $"El monto no es el correcto, por favor verifique el precio de la recervacion."));
        }
        else
        {
            if (await ValidarExistencia())
            {
                Toast.Notify(new(ToastType.Info, $"Ya existe un pago para esta reservacion"));
                await Task.Delay(3000);
                return;
            }
            PagoDto.ReservacionId = ReservacionDto.ReservacionId;
            PagoDto.Fecha = DateTime.Now;
            var realizado = await pagosServices.Guardar(PagoDto);
            ReservacionDto.Pago = true;
            var actualizar = await reservacionesServices.Guardar(ReservacionDto);

            if (realizado == true && actualizar == true)
            {
                Toast.Notify(new(ToastType.Success, $"Pago realizado."));
                await Task.Delay(4000);
                navigationManager.NavigateTo("/");
            }
            else
            {
                Toast.Notify(new(ToastType.Danger, $"No se pudo realizar el pago. Intentelo de nuevo."));
            }
        }
    
}
}
