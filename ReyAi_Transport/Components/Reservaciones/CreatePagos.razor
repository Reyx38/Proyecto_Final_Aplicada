@inject ReservacionesServices reservacionesServices
@inject PagosServices pagosServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="PagoDto" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">Realizar Pago</h5>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-12">
                        <label class="form-label fs-5">Codigo de la reservacion:  </label>
                        <label class="form-label fs-5 "><strong>@ReservacionDto.ReservacionId.ToString()</strong></label>
                    </div>
                    <div class="col-12">
                        <label class="form-label fs-5">Monto a pagar:  </label>
                        <label class="form-label fs-5 "><strong>DOP$ @ReservacionDto.Monto.ToString()</strong></label>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label class="form-label">Numero de tarjeta</label>
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Monto</label>
                    </div>
                </div>
                <div class="row mb-3">
                    @*Tarjeta*@
                    <div class="col-md-4">
                        <InputText type="password" class="form-control" @bind-Value="numeroTarjeta"></InputText>
                    </div>
                    @*Monto*@
                    <div class="col-md-4">
                        <InputNumber class="form-control" @bind-Value="PagoDto.Monto" placeholder="DOP$000000.00"></InputNumber>
                    </div>
                    
                </div>
            </div>
        </div>
    </div>
</EditForm>
@if (esValido.HasValue)
{
    <div class="mt-3">
        @if (esValido.Value)
        {
            <div class="alert alert-success">El número de tarjeta es válido.</div>
        }
        else
        {
            <div class="alert alert-danger">El número de tarjeta no es válido.</div>
        }
    </div>
}

@code {
    [Parameter]
    public int ReservacionId { get; set; }

    public ReservacionesDto ReservacionDto { get; set; } = new ReservacionesDto();
    public PagosDto PagoDto { get; set; } = new PagosDto();

    private string numeroTarjeta;
    private bool? esValido;
    public string Mensaje { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ReservacionDto = await reservacionesServices.Buscar(ReservacionId);
    }

    private void Validar()
    {
        esValido = ValidarNumeroTarjeta(numeroTarjeta);
    }

    public bool ValidarNumeroTarjeta(string numeroTarjeta)
    {
        numeroTarjeta = numeroTarjeta.Replace(" ", "");

        if (numeroTarjeta.Length < 13 || numeroTarjeta.Length > 19 || !numeroTarjeta.All(char.IsDigit))
        {
            return false;
        }

        int suma = 0;
        bool esPar = false;

        for (int i = numeroTarjeta.Length - 1; i >= 0; i--)
        {
            int digito = int.Parse(numeroTarjeta[i].ToString());

            if (esPar)
            {
                digito *= 2;

                if (digito > 9)
                {
                    digito -= 9;
                }
            }

            suma += digito;
            esPar = !esPar;
        }

        return suma % 10 == 0;
    }

    private async Task<bool> ValidarExistencia()
    {
        var valido = await pagosServices.ExistePago(PagoDto.PagoId, PagoDto.ReservacionId);
        return valido;
    }


    private async Task Guardar()
    {
        Validar();
        if (esValido.HasValue)
        {
            if(PagoDto.Monto > ReservacionDto.Monto || PagoDto.Monto < ReservacionDto.Monto)
            {
                Mensaje = "El monto no es el correcto, por favor verifique el precio de la recervacion.";
            }
            else
            {
                if (await ValidarExistencia())
                {
                    Mensaje = "Ya existe un pago para esta reservacion";
                    return;
                }
                PagoDto.MetodoPId = 1;
                PagoDto.ReservacionId = ReservacionDto.ReservacionId;
                var realizado = await pagosServices.Guardar(PagoDto);
                var actualizar = await reservacionesServices.Guardar(ReservacionDto);

                if (realizado == true && actualizar == true)
                {
                    Mensaje = "Pago realizado.";
                    navigationManager.NavigateTo("#");
                }
                else
                {
                    Mensaje = "No se pudo realizar el pago. Intentelo de nuevo.";
                }
            }
        }
        

    }
}
