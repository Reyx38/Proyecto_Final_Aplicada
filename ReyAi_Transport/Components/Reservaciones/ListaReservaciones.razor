
﻿@page "/ReservacionesPendientes/IndexReservaciones"  
@using Microsoft.AspNetCore.Components.QuickGrid  

@inject ReservacionesServices ReservacionesService  
@rendermode InteractiveServer  
<link rel="stylesheet" href="/Estilos/Reservaciones/ListReservaciones.css" />  

<div class="container">  
    <div class="overlay">  
        <div class="detalles-container">  
            <div class="card-header">  
                <h5 class="card-title">Lista de Reservaciones</h5>  
            </div>  
            <div class="card-body">  
                <div class="row">  
                    <div class="col-3">  
                        <label class="col-form-label"><strong>Filtrar por</strong></label>  
                    </div>  
                    <div class="col-4">  
                        <label class="col-form-label"><strong>Búsqueda</strong></label>  
                    </div>  
                </div>  

                <div class="row align-items-center">  
                    <div class="col-3">  
                        <InputSelect class="form-select" @bind-Value="Filtro">  
                            <option value="" selected disabled>Elija una opción</option>  
                            <option value="Destino">Destino</option>  
                            <option value="Estado">Estado</option>  
                            <option value="Fecha">Fecha</option>  
                        </InputSelect>  
                    </div>  

                    <div class="col-4">  
                        <div class="input-group">  
                            <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />  
                            <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>  
                        </div>  
                    </div>  

                    <div class="col-auto">  
                        <button type="button" class="btn btn-outline-secondary bi bi-arrow-clockwise" @onclick="Restablecer"></button>  
                    </div>  
                </div>  

                <div class="row mt-3">  
                    @if (Filtro == "Fecha")  
                    {  
                        <div class="col-3">  
                            <label class="col-form-label"><strong>Desde</strong></label>  
                            <InputDate class="form-control" @bind-Value="Desde"></InputDate>  
                        </div>  
                        <div class="col-3">  
                            <label class="col-form-label"><strong>Hasta</strong></label>  
                            <InputDate class="form-control" @bind-Value="Hasta"></InputDate>  
                        </div>  
                    }  
                </div>  

                <QuickGrid Items="@(Reservaciones.AsQueryable())" DefaultSort="@sortByFecha">  
                    <div class="flex items-center">  
                        <PropertyColumn Title="ID Reservación" Property="@(r => r.ReservacionId)" />  
                        <PropertyColumn Title="Fecha" Property="@(r => r.Fecha)" Format="dd/MM/yyyy" />  
                        <PropertyColumn Title="Monto" Property="@(r => r.Monto)" />  
                        <PropertyColumn Title="Pasajeros" Property="@(r => r.CantidadPasajeros)" />  
                        <PropertyColumn Title="Destino" Property="@(r => r.ViajeDto)" />  
                        <PropertyColumn Title="Estado" Property="@(r => r.EstadosReservacionesDto)" />  
                    </div>  

                    <TemplateColumn Title="Acciones">  
                        <div class="flex items-center">  
                            <button class="btn btn-success btn-sm me-1" @onclick="@(() => CambiarEstado(context, 2))">  
                                Aceptar  
                            </button>  
                            <button class="btn btn-danger btn-sm" @onclick="@(() => CambiarEstado(context, 3))">  
                                Cancelar  
                            </button>  
                        </div>  
                    </TemplateColumn>  
                </QuickGrid>  
            </div>  
        </div>  
    </div>  
</div>  

<p><strong>@mensaje</strong></p>  

@code {  
    private List<ReservacionesDto> Reservaciones = new();  
    private string mensaje = string.Empty;  
    public string Filtro { get; set; } = string.Empty;  
    public string ValorFiltro { get; set; } = string.Empty;  
    public DateTime? Desde { get; set; }  
    public DateTime? Hasta { get; set; }  

    GridSort<ReservacionesDto> sortByFecha = GridSort<ReservacionesDto>  
        .ByAscending(r => r.Fecha);  

    protected override async Task OnInitializedAsync()  
    {  
        await CargarReservaciones();  
    }  

    private async Task CargarReservaciones()  
    {  
        Reservaciones = await ReservacionesService.Listar(r => true);  
    }  

    private async Task CambiarEstado(ReservacionesDto reservacion, int nuevoEstado)  
    {  
        reservacion.EstadoId = nuevoEstado;  
        var guardado = await ReservacionesService.Guardar(reservacion);  
        if (guardado)  
        {  
            mensaje = $"Reservación {reservacion.ReservacionId} marcada como {nuevoEstado}.";  
            await CargarReservaciones();  
        }  
        else  
        {  
            mensaje = "Error al actualizar el estado.";  
        }  
    }  

    private async Task Buscar()  
    {  
        if (ValorFiltro.Trim() != "")  
        {  
            if (Filtro == "Destino")  
            {  
                Reservaciones = await ReservacionesService.Listar(e => e.ViajeDto.ToLower().Contains(ValorFiltro.ToLower()));  
            }  
            else if (Filtro == "Estado")  
            {  
                Reservaciones = await ReservacionesService.Listar(e => e.EstadosReservacionesDto.ToLower().Contains(ValorFiltro.ToLower()));  
            }  
        }  
        else if (Filtro == "Fecha")  
        {  
            Reservaciones = await ReservacionesService.Listar(f => f.Fecha >= Desde && f.Fecha <= Hasta);  
        }  
        else  
        {  
            Reservaciones = await ReservacionesService.Listar(e => e.ReservacionId > 0);  
        }  
    }  

    private async Task Restablecer()  
    {  
        Reservaciones = await ReservacionesService.Listar(e => e.ReservacionId > 0);  
        Filtro = string.Empty;  
        ValorFiltro = string.Empty;  
    }  
}
=======
﻿@page "/ListaReservaciones"

@inject ReservacionesServices ReservacionesService
@inject TaxistaServices taxistaServices
@rendermode InteractiveServer
<link rel="stylesheet" href="/Estilos/Reservaciones/ListReservaciones.css" />

<div class="container">
    <div class="overlay">
        <div class="detalles-container">
            <div class="card-header">
                <h5 class="card-title">Lista de reservaciones</h5>
            </div>
            <div class="card-body">
                @*labels*@
                <div class="row">

                    @*Filtrar por*@
                    <div class="col-3">
                        <label class="col-form-label"><strong>Filtrar por</strong></label>
                    </div>

                    @*ValorFiltro*@
                    <div class="col-4">
                        <label class="col-form-label"><strong>B&uacute;squeda</strong></label>
                    </div>
                </div>

                @*Inputs y botones*@
                <div class="row align-items-center">
                    @*filtro*@
                    <div class="col-3">
                        <InputSelect class="form-select" @bind-Value="Filtro">
                            <option value="" selected disabled>Elija una opci&oacute;n</option>
                            <option value="Destino">Destino</option>
                            <option value="ID Reservacion">ID Reservacion</option>
                            <option value="Estado">Estado</option>
                            <option value="Fecha">Fecha</option>

                        </InputSelect>
                    </div>

                    @*Busqueda*@
                    <div class="col-4">
                        <div class="input-group">
                            <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                            <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                        </div>
                    </div>

                    @*Restablecer*@
                    <div class="col-auto">
                        <button type="button" class="btn btn-outline-secondary bi bi-arrow-clockwise" @onclick="Restablecer"></button>
                    </div>
                    <div class="row mt-3">

                        @if (Filtro == "Fecha")
                        {
                            @*Desde*@
                            <div class="col-3">
                                <label class="col-form-label"><strong>Desde</strong></label>
                                <InputDate class="form-control" @bind-Value="Desde"></InputDate>
                            </div>

                            @*Hasta*@
                            <div class="col-3">
                                <label class="col-form-label"><strong>Hasta</strong></label>
                                <div class="input-group">
                                    <InputDate class="form-control" @bind-Value="Hasta"></InputDate>
                                </div>
                            </div>
                        }
                    </div>
                    <div>
                        <QuickGrid Items="@(Reservaciones.AsQueryable())" DefaultSort="@sortByFecha">
                            <div class="flex items-center">
                                <PropertyColumn Title="ID Reservación" Property="@(r => r.ReservacionId)" />
                                <PropertyColumn Title="Fecha" Property="@(r => r.Fecha)" Format="dd/MM/yyyy" />
                                <PropertyColumn Title="Monto" Property="@(r => r.Monto)" />
                                <PropertyColumn Title="Pasajesros" Property="@(r => r.CantidadPasajeros)" />
                                <PropertyColumn Title="Destino" Property="@(r => r.ViajeDto)" />
                                <PropertyColumn Title="Estado" Property="@(r => r.EstadosReservacionesDto)" />

                            </div>

                            <TemplateColumn Title="Acciones">
                                <div class="flex items-center">
                                    <button class="btn btn-success btn-sm me-1 bi bi-clipboard2-check"
                                            @onclick="@(() => CambiarEstado(context, 2))">
                                        
                                    </button>
                                    <button class="btn btn-danger btn-sm bi bi-clipboard2-x"
                                            @onclick="@(() => CambiarEstado(context, 3))">
                                        
                                    </button>
                                    <button class="btn btn-danger btn-sm bi bi-trash"
                                            @onclick="@(() => AbrirModal(context))">
                                    </button>
                                </div>
                            </TemplateColumn>
                        </QuickGrid>
                    </div>
                </div>
                <div class="card-footer">
                    <a href="/" class="btn btn-light bi bi-arrow-left-square "> Volver</a>
                </div>
            </div>
        </div>
    </div>
</div>

<p><strong>@mensaje</strong></p>

<div class="modal fade @(MostrarModal ? "show d-block" : "d-none")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmacion de eliminar</h5>
                <button type="button" class="btn-close" @onclick="CerrarModal"></button>
            </div>
            <div class="modal-body">
                <p>¿Estas seguro de eliminar la recervacion <strong>@ReservacionSeleccionado.ReservacionId</strong>?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ReservacionesDto> Reservaciones = new();
    private TaxistaDto Taxista { get; set; } = new TaxistaDto();
    private string mensaje = string.Empty;
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;
    public DateTime? Desde { get; set; }
    public DateTime? Hasta { get; set; }
    public bool MostrarModal { get; set; } = false;
    public ReservacionesDto ReservacionSeleccionado { get; set; } = new ReservacionesDto();
    // Configuración de ordenamiento por defecto (por fecha de la reservación)
    GridSort<ReservacionesDto> sortByFecha = GridSort<ReservacionesDto>
        .ByAscending(r => r.Fecha);

    protected override async Task OnInitializedAsync()
    {
        await CargarReservaciones();
    }

    private async Task CargarReservaciones()
    {
        Reservaciones = await ReservacionesService.Listar(r => true); // Cargar todas las reservaciones
    }

    private async Task CambiarEstado(ReservacionesDto reservacion, int nuevoEstado)
    {
        reservacion.EstadoId = nuevoEstado;
        if(nuevoEstado == 2)
        {
            Taxista.EstadoTId = 2;
            var guardarT = await taxistaServices.Guardar(Taxista);
        }else if(nuevoEstado == 3)
        {
            Taxista.EstadoTId = 1;
            var guardarT = await taxistaServices.Guardar(Taxista);
        }
        var guardado = await ReservacionesService.Guardar(reservacion);
        if (guardado)
        {
            mensaje = $"Reservación {reservacion.ReservacionId} marcada como {nuevoEstado}.";
            await CargarReservaciones(); // Refresca la lista
        }
        else
        {
            mensaje = "Error al actualizar el estado.";
        }
    }

    private async Task Buscar()
    {
        if (ValorFiltro.Trim() != "")
        {
            if (Filtro == "Destino")
            {
                Reservaciones = await ReservacionesService.Listar(e => e.ViajeDto.ToLower().Contains(ValorFiltro.ToLower()));
            }
            else if (Filtro == "Estado")
            {
                Reservaciones = await ReservacionesService.Listar(e => e.EstadosReservacionesDto.ToLower().Contains(ValorFiltro.ToLower()));
            }
            else if (Filtro == "ID Reservacion" && int.TryParse(ValorFiltro, out int reservacionId))
            {
                Reservaciones = await ReservacionesService.Listar(e => e.ReservacionId == reservacionId);
            }
        }
        else if (Filtro == "Fecha")
        {
            Reservaciones = await ReservacionesService
            .Listar(f => f.Fecha >= Desde && f.Fecha <= Hasta);
        }
        else
        {
            Reservaciones = await ReservacionesService.Listar(e => e.ReservacionId > 0);
        }

    }

    private async Task Restablecer()
    {
        Reservaciones = await ReservacionesService.Listar(e => e.ReservacionId > 0);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }

    private void AbrirModal(ReservacionesDto reservacion)
    {
        ReservacionSeleccionado = reservacion;
        MostrarModal = true;
    }
    private void CerrarModal()
    {
        MostrarModal = false;
        ReservacionSeleccionado = new ReservacionesDto();
    }
    private async Task Eliminar()
    {
        if (ReservacionSeleccionado.EstadoId == 3)
        {
            var eliminado = await ReservacionesService.Eliminar(ReservacionSeleccionado.ReservacionId);
            if (eliminado)
            {
                mensaje = $"Reservación {ReservacionSeleccionado.ReservacionId} eliminada con éxito.";
                await CargarReservaciones();
            }
            else
            {
                mensaje = "Error al eliminar la reservación.";
                CerrarModal();
            }
            CerrarModal();
        }
    }
}

