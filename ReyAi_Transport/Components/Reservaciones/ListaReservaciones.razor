@page "/ListaReservaciones"
@using Microsoft.AspNetCore.Components.QuickGrid

@inject ReservacionesServices ReservacionesService
@rendermode InteractiveServer
<link rel="stylesheet" href="/Estilos/Reservaciones/ListReservaciones.css" />

<div class="container">
    <div class="overlay">
        <div class="detalles-container">
            <div class="card-header">
                <h5 class="card-title">Lista de reservaciones</h5>
            </div>
            <div class="card-body">
                @*labels*@
                <div class="row">

                    @*Filtrar por*@
                    <div class="col-3">
                        <label class="col-form-label"><strong>Filtrar por</strong></label>
                    </div>

                    @*ValorFiltro*@
                    <div class="col-4">
                        <label class="col-form-label"><strong>B&uacute;squeda</strong></label>
                    </div>
                </div>

                @*Inputs y botones*@
                <div class="row align-items-center">
                    @*filtro*@
                    <div class="col-3">
                        <InputSelect class="form-select" @bind-Value="Filtro">
                            <option value="" selected disabled>Elija una opci&oacute;n</option>
                            <option value="Destino">Destino</option>
                            <option value="Estado">Estado</option>
                            <option value="Fecha">Fecha</option>

                        </InputSelect>
                    </div>

                    @*Busqueda*@
                    <div class="col-4">
                        <div class="input-group">
                            <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                            <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                        </div>
                    </div>

                    @*Restablecer*@
                    <div class="col-auto">
                        <button type="button" class="btn btn-outline-secondary bi bi-arrow-clockwise" @onclick="Restablecer"></button>
                    </div>
                    <div class="row mt-3">

                        @if (Filtro == "Fecha")
                        {
                            @*Desde*@
                            <div class="col-3">
                                <label class="col-form-label"><strong>Desde</strong></label>
                                <InputDate class="form-control" @bind-Value="Desde"></InputDate>
                            </div>

                            @*Hasta*@
                            <div class="col-3">
                                <label class="col-form-label"><strong>Hasta</strong></label>
                                <div class="input-group">
                                    <InputDate class="form-control" @bind-Value="Hasta"></InputDate>
                                </div>
                            </div>
                        }
                    </div>
                    <div>
                        <QuickGrid Items="@(Reservaciones.AsQueryable())" DefaultSort="@sortByFecha">
                            <div class="flex items-center">
                                <PropertyColumn Title="ID Reservación" Property="@(r => r.ReservacionId)" />
                                <PropertyColumn Title="Fecha" Property="@(r => r.Fecha)" Format="dd/MM/yyyy" />
                                <PropertyColumn Title="Monto" Property="@(r => r.Monto)" />
                                <PropertyColumn Title="Pasajesros" Property="@(r => r.CantidadPasajeros)" />
                                <PropertyColumn Title="Destino" Property="@(r => r.ViajeDto)" />
                                <PropertyColumn Title="Estado" Property="@(r => r.EstadosReservacionesDto)" />

                            </div>

                            <TemplateColumn Title="Acciones">
                                <div class="flex items-center">
                                    <button class="btn btn-success btn-sm me-1"
                                            @onclick="@(() => CambiarEstado(context, 2))">
                                        Aceptar
                                    </button>
                                    <button class="btn btn-danger btn-sm"
                                            @onclick="@(() => CambiarEstado(context, 3))">
                                        Cancelar
                                    </button>
                                </div>
                            </TemplateColumn>
                        </QuickGrid>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<p><strong>@mensaje</strong></p>

@code {
    private List<ReservacionesDto> Reservaciones = new();
    private string mensaje = string.Empty;
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;
    public DateTime? Desde { get; set; }
    public DateTime? Hasta { get; set; }

    // Configuración de ordenamiento por defecto (por fecha de la reservación)
    GridSort<ReservacionesDto> sortByFecha = GridSort<ReservacionesDto>
        .ByAscending(r => r.Fecha);

    protected override async Task OnInitializedAsync()
    {
        await CargarReservaciones();
    }

    private async Task CargarReservaciones()
    {
        Reservaciones = await ReservacionesService.Listar(r => true); // Cargar todas las reservaciones
    }

    private async Task CambiarEstado(ReservacionesDto reservacion, int nuevoEstado)
    {
        reservacion.EstadoId = nuevoEstado;
        var guardado = await ReservacionesService.Guardar(reservacion);
        if (guardado)
        {
            mensaje = $"Reservación {reservacion.ReservacionId} marcada como {nuevoEstado}.";
            await CargarReservaciones(); // Refresca la lista
        }
        else
        {
            mensaje = "Error al actualizar el estado.";
        }
    }

        private async Task Buscar()
        {
            if (ValorFiltro.Trim() != "")
            {
                if (Filtro == "Destino")
                {
                    Reservaciones = await ReservacionesService.Listar(e => e.ViajeDto.ToLower().Contains(ValorFiltro.ToLower()));
                }
                else if (Filtro == "Estado")
                {
                    Reservaciones = await ReservacionesService.Listar(e => e.EstadosReservacionesDto.ToLower().Contains(ValorFiltro.ToLower()));
                }
            }
            else if (Filtro == "Fecha")
            {
                Reservaciones = await ReservacionesService
                .Listar(f => f.Fecha >= Desde && f.Fecha <= Hasta);
            }
            else
            {
                Reservaciones = await ReservacionesService.Listar(e => e.ReservacionId > 0);
            }

        }

        private async Task Restablecer()
        {
            Reservaciones = await ReservacionesService.Listar(e => e.ReservacionId > 0);
            Filtro = string.Empty;
            ValorFiltro = string.Empty;
        }

}
