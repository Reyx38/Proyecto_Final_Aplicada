@page "/reservacion"
@inject ViajeServices viajeServices
@inject ReservacionDetallesServices detallesServices
@inject TaxistaServices taxistaService
@inject CiudadServices ciudadesServices
@inject ReservacionesServices reservacionesServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@rendermode InteractiveServer
<link rel="stylesheet" href="/Estilos/Viajes/Crear.css" />

<EditForm Model="ReservacionDto" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />
	<div class="overlay"></div>
	<div class="container">
		<div class="card">
			<div class="card-header">
				<h2>Reservacion</h2>
			</div>
			<div class="card-body">
				<div class="row mb-3">
					<div class="col-12">
						<label class="form-label">Seleccionar conductor:</label>
						<InputSelect class="form-select" @bind-Value="ViajeDto.TaxistaId">
							<option selected disabled value="0">-- Seleccione un Conductor --</option>

							@foreach (var taxista in ListaTaxistas)
							{
								<option value="@taxista.TaxistaId">@taxista.NickName</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => ViajeDto.TaxistaId)" />
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-12">
						<label class="form-label">Destino</label>
						<InputSelect class="form-select" @bind-Value="ViajeDto.Destino">
							<option selected disabled value="0">-- Seleccione un Destino --</option>

							@foreach (var Ciudades in ListaCiudades)
							{
								<option value="@Ciudades.CiudadId">@Ciudades.Nombre</option>
							}
						</InputSelect>
					</div>
				</div>
				<div class="row mb-3">
					@*Fecha Viaje*@
					<div class="col-md-4">
						<label class="form-label">Fecha</label>
						<InputDate class="form-control" @bind-Value="ViajeDto.Fecha" />
						<ValidationMessage For="@(() => ViajeDto.Fecha)" />
					</div>
					@*Cantidad de personas*@
					<div class="col-md-4">
						<label class="form-label">Cantidad de personas</label>
						<InputNumber class="form-control" @bind-Value="@ViajeDto.personas" placeholder="20"></InputNumber>
					</div>

					@if (ViajeDto.personas > 0)
					{
						CalcularMonto();
					}

					@*Precio*@
					<div class="col-md-4">
						<label class="form-label">Costo</label>
						<label class="form-label"><strong>DOP$ @ViajeDto.Precio.ToString("N2")</strong></label>
					</div>
				</div>
				<div class="row">
					<label class="form-label"><strong>¿Quieres algo para el camino?</strong></label>
					<div class="col-auto">
                            <SeleccionarArticulos ListaArticulo="ListaArticulos"
                                                 ArticuloId="DetallesDto.ArticuloId"
                                                 Cantidad="DetallesDto.Cantidad"
                                                 Precio="DetallesDto.Precio"
                                                 ArticuloSeleccionado="AgregarDetalle" />
                    </div>

				</div>
				<ul class="mt-3">
					@foreach (var detalle in ReservacionDto.ReservacionDetalles)
					{
						<li class="mt-2">
							Articulo ID: @detalle.ArticuloId -- @detalle.ArticuloDto?.Descripcion -- Cantidad: @detalle.Cantidad
							-- Precio:$ @detalle.ArticuloDto?.Precio -- PrecioTotal: $ @detalle.Precio
							<button type="button" @onclick="() => Eliminar(detalle)" class="btnA btn-outline-danger btn-sm ms-2 bi bi-trash"></button>
						</li>
					}
				</ul>
				<div class="card-footer">
					<button type="submit" class="btn btn-danger bi bi-trash mt-2">Guardar</button>
					<a href="/" class="btn btn-light bi bi-arrow-left-square "> Volver</a>
					<a href="#" class="btn btn-danger">Realizar pago</a>
				</div>
			</div>
		</div>
	</div>

</EditForm> 

@code {
	[Parameter]
	public int ViajeId { get; set; }
	public ViajesDto ViajeDto { get; set; } = new ViajesDto();
	public ReservacionesDto ReservacionDto { get; set; } = new ReservacionesDto();
	public ReservacionDetallesDto DetallesDto { get; set; } = new ReservacionDetallesDto();
	public List<TaxistaDto> ListaTaxistas { get; set; } = new List<TaxistaDto>();
	public List<ArticulosDto> ListaArticulos { get; set; } = new List<ArticulosDto>();
	public List<ViajesDto> ListaViajes { get; set; } = new List<ViajesDto>();
	public List<CiudadesDto> ListaCiudades { get; set; } = new List<CiudadesDto>();
	public string Mensaje { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		if (user.Identity != null && user.Identity.IsAuthenticated)
		{
			ViajeDto.ClienteId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
		}
		else
		{
			navigationManager.NavigateTo("/Account/Login");
		}
		if(ViajeId > 0)
		{
			ViajeDto = await viajeServices.Buscar(ViajeId);
		}
		ListaCiudades = await ciudadesServices.Listar(a => true);

		ListaArticulos = await detallesServices.Listar(a => a.ArticuloId > 0);
		ListaViajes = await viajeServices.Listar(a => true);
		ListaTaxistas = await taxistaService.Listar(a => true);
	}

	private async Task AgregarDetalle((ArticulosDto articulos, int Cantidad) selection)
	{
		var ArticuloExiste = ReservacionDto.ReservacionDetalles.FirstOrDefault(A => A.ArticuloId == selection.articulos.ArticuloId);

		if (ArticuloExiste != null)
		{
			ArticuloExiste.Cantidad += selection.Cantidad;
			ArticuloExiste.Costo = selection.articulos.Costo * ArticuloExiste.Cantidad;
			ArticuloExiste.Precio = selection.articulos.Precio * ArticuloExiste.Cantidad;
		}
		else
		{
			var ReservacionDetalle = new ReservacionDetallesDto
            {
               ArticuloId = selection.articulos.ArticuloId,
               Cantidad = selection.Cantidad,
               Costo = selection.articulos.Costo * selection.Cantidad,
               Precio = selection.articulos.Precio * selection.Cantidad, 
            };

			ReservacionDto.ReservacionDetalles.Add(ReservacionDetalle);

			DetallesDto = new ReservacionDetallesDto();

			await Task.CompletedTask;
		}
	}

	private async Task<bool> Validar()
	{
		var valido = await reservacionesServices.
		ExisteReservacion(ReservacionDto.ReservacionId, ReservacionDto.ViajeId);
		return valido;
	}

	private void CalcularMonto()
	{
		if(ViajeDto.Destino == 1)
		{
			ViajeDto.Precio = ViajeDto.personas * 350 + ReservacionDto.ReservacionDetalles.Sum(d => d.Precio);
		}
		else if (ViajeDto.Destino == 2)
		{
			ViajeDto.Precio = ViajeDto.personas * 1200 + ReservacionDto.ReservacionDetalles.Sum(d => d.Precio);
		}
		else if (ViajeDto.Destino == 3)
		{
			ViajeDto.Precio = ViajeDto.personas * 1000 + ReservacionDto.ReservacionDetalles.Sum(d => d.Precio);
		}
		else if (ViajeDto.Destino == 4)
		{
			ViajeDto.Precio = ViajeDto.personas * 1500 + ReservacionDto.ReservacionDetalles.Sum(d => d.Precio);
		}
		else if (ViajeDto.Destino == 5)
		{
			ViajeDto.Precio = ViajeDto.personas * 1300 + ReservacionDto.ReservacionDetalles.Sum(d => d.Precio);
		}
	}

	private async Task Guardar()
	{
		if (await Validar())
		{
			Mensaje = "Ya existe un trabajo con este ID";
			return;
		}
		
		if(ViajeDto.ViajeId == 0)
		{
			ViajeDto.EstadoId = 1;
			ViajeDto.Descripcion = "";
			var guardarViaje = await viajeServices.Guardar(ViajeDto);
		}

		ReservacionDto.Fecha = DateTime.Now;
		ReservacionDto.Pago = false;
		ReservacionDto.ViajeId = ViajeDto.ViajeId;
		 await GenerarRecibo();
		var crear = await reservacionesServices.Guardar(ReservacionDto);

		if (crear)
		{
			Mensaje = "Se ha creado correctamente el trabajo";
			navigationManager.NavigateTo("#");
		}
		else
		{
			Mensaje = "No se ha creado correctamente el trabajo";
		}

	}

	public async Task Eliminar(ReservacionDetallesDto detalle)
	{
		ReservacionDto.ReservacionDetalles.Remove(detalle);
		DetallesDto.Cantidad = detalle.Cantidad;
		DetallesDto.ArticuloId = detalle.ArticuloId;
	}

	public async Task GenerarRecibo()
	{
		var destino = await ciudadesServices.Buscar(ViajeDto.Destino);
		ReservacionDto.Recibo = $"Usted a reservado un viaje a {destino.Nombre} para la fecha {ViajeDto.Fecha} con un precio de {ViajeDto.Precio}, gracias por preferirnos";
	}

}
