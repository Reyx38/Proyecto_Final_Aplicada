@page "/Reservacion/{ViajeId:int}"
@page "/Reservacion"
@attribute [Authorize(Roles = "Cliente")]
@rendermode InteractiveServer
@inject ViajeServices viajeServices
@inject ReservacionDetallesServices detallesServices
@inject TaxistaServices taxistaService
@inject CiudadServices ciudadesServices
@inject ReservacionesServices reservacionesServices
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@inject ToastService Toast
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />
<link rel="stylesheet" href="/Estilos/Viajes/Crear.css" />

<PageTitle>Reservacion de viaje</PageTitle>
<EditForm Model="ReservacionDto" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="container">
		<div class="overlay">
			<div class="card">
			<div class="card-header">
				<h2>Reservacion de viaje</h2>
			</div>
			<div class="card-body">
				<div class="row mb-3">
					<InputSelect class="form-select" @bind-Value="@ReservacionDto.ViajeId">
						<option selected disabled value="0">-- Seleccione un viaje --</option>
						@foreach (var Viajes in ListViajes)
						{
							<option value="@Viajes.ViajeId">@Viajes.Descripcion</option>
						}
					</InputSelect>
				</div>

				<div class="row">
					<div class="row mb-3">
						@*Fecha Viaje*@
						<div class="col-md-4">
							<label class="form-label">Fecha</label>
						</div>
						@*Cantidad de personas*@
						<div class="col-md-4">
							<label class="form-label">Cantidad de pasajeros</label>
						</div>
						@*Precio*@
						<div class="col-md-4">
							<label class="form-label fs-6">Costo</label>
						</div>
					</div>
					<div class="row mb-3">
						@*Fecha Viaje*@
						<div class="col-md-4">
							<InputDate class="form-control" @bind-Value="ReservacionDto.Fecha" />
							<ValidationMessage For="(()=> ReservacionDto.Fecha)" />
						</div>
						@*Cantidad de personas*@
						<div class="col-md-4">
							<InputNumber class="form-control" @bind-Value="ReservacionDto.CantidadPasajeros" placeholder="20"></InputNumber>
							<ValidationMessage For="(()=> ReservacionDto.CantidadPasajeros)" />
						</div>
							@*Precio*@
						<div class="col-md-4">
							<label class="form-label fs-6"><strong>DOP$ @ReservacionDto.Monto.ToString("N2")</strong></label>
						</div>
					</div>
				</div>
				<div class="row">
					<label class="form-label"><strong>¿Quieres algo para el camino?</strong></label>
					<div class="col-auto">
						<SeleccionarArticulos ListaArticulo="ListaArticulos"
											  ArticuloId="DetallesDto.ArticuloId"
											  Cantidad="DetallesDto.Cantidad"
											  Precio="DetallesDto.Precio"
											  ArticuloSeleccionado="AgregarDetalle" />
					</div>

				</div>

				<ul class="mt-3">
					@foreach (var detalle in ReservacionDto.ReservacionDetalles)
					{
						<li class=" text-white mt-2">
							Articulo ID: @detalle.ArticuloId -- @detalle.ArticuloDto?.Descripcion -- Cantidad: @detalle.Cantidad
							-- PrecioTotal: $ @detalle.Precio
							<button type="button" @onclick="() => Eliminar(detalle)" class="btnA btn-outline-danger btn-sm ms-2 bi bi-trash"></button>
						</li>
					}
				</ul>
				<div class="card-footer">
					<a href="/" class="btn btn-light bi bi-arrow-left-square "> Volver</a>
					<button type="submit" class="btn btn-danger mt-2 bi bi-floppy"> Guardar</button>
				</div>
			</div>
		</div>
		</div>
		
	</div>

</EditForm>

@code {
	[Parameter]
	public int ViajeId { get; set; }

	public List<ViajesDto> ListViajes { get; set; } = [];
	public ViajesDto ViajeDto { get; set; } = new ViajesDto();

	public ReservacionesDto ReservacionDto { get; set; } = new ReservacionesDto();
	public ReservacionDetallesDto DetallesDto { get; set; } = new ReservacionDetallesDto();

	public List<TaxistaDto> ListaTaxistas { get; set; } = new List<TaxistaDto>();
	public List<ArticulosDto> ListaArticulos { get; set; } = new List<ArticulosDto>();
	public List<ViajesDto> ListaViajes { get; set; } = new List<ViajesDto>();
	public List<CiudadesDto> ListaCiudades { get; set; } = new List<CiudadesDto>();

	public TaxistaDto taxista { get; set; } = new TaxistaDto();
	public CiudadesDto destino { get; set; } = new CiudadesDto();

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity != null && user.Identity.IsAuthenticated)
		{
			ReservacionDto.ClienteId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
		}
		else
		{
			Toast.Notify(new(ToastType.Danger, $"Usuario no autenticado."));
			await Task.Delay(2000);
			navigationManager.NavigateTo("/Account/Login");
		}

		ReservacionDto.Fecha = DateTime.Now;
		ReservacionDto.ViajeId = ViajeId;
		ListaArticulos = await detallesServices.Listar(a => a.ArticuloId > 0);
		ListViajes = await viajeServices.Listar(v => true);

	}

	private async Task AgregarDetalle((ArticulosDto articulos, int Cantidad) selection)
	{
		var ArticuloExiste = ReservacionDto.ReservacionDetalles.FirstOrDefault(A => A.ArticuloId == selection.articulos.ArticuloId);

		if (ArticuloExiste != null)
		{
			ArticuloExiste.Cantidad += selection.Cantidad;
			ArticuloExiste.Costo = selection.articulos.Costo * ArticuloExiste.Cantidad;
			ArticuloExiste.Precio = selection.articulos.Precio * ArticuloExiste.Cantidad;
		}
		else
		{
			var ReservacionDetalle = new ReservacionDetallesDto
				{
					ArticuloId = selection.articulos.ArticuloId,
					Cantidad = selection.Cantidad,
					Costo = selection.articulos.Costo * selection.Cantidad,
					Precio = selection.articulos.Precio * selection.Cantidad,
				};

			ReservacionDto.ReservacionDetalles.Add(ReservacionDetalle);

			DetallesDto = new ReservacionDetallesDto();

			await Task.CompletedTask;
		}
	}

	private async Task<bool> Validar()
	{
		var valido = await reservacionesServices.
		ExisteReservacion(ReservacionDto.ReservacionId, ReservacionDto.ViajeId, ReservacionDto.Fecha);
		return valido;
	}

	private async Task CalcularMonto()
	{
		ViajeDto = await viajeServices.Buscar(ReservacionDto.ViajeId);

		ReservacionDto.Monto = ViajeDto.Precio * ReservacionDto.CantidadPasajeros + ReservacionDto.ReservacionDetalles.Sum(a => a.Precio);
	}

	private async Task Guardar()
	{
		if (await Validar())
		{
			Toast.Notify(new(ToastType.Info, $"Ya existe una reservacion con estos datos."));
			await Task.Delay(3000);
			return;
		}
		if (ReservacionDto.ViajeId <= 0)
		{
			Toast.Notify(new(ToastType.Warning, $"Debe seleccionar un viaje."));
			await Task.Delay(3000);
			return;
		}
		ViajeDto = await viajeServices.Buscar(ReservacionDto.ViajeId);

		if(ReservacionDto.Fecha < ViajeDto.FechaInicio || ReservacionDto.Fecha > ViajeDto.FechaCierre)
		{
			Toast.Notify(new(ToastType.Danger, $"El viaje no se encuentra disponible entre esos dias."));
			await Task.Delay(3000);
			return;
		}
		if(ReservacionDto.CantidadPasajeros > ViajeDto.personas)
		{
			Toast.Notify(new(ToastType.Danger, $"La cantidad de pasajaeros ha pasado el limite."));
			await Task.Delay(3000);
			return;
		}
		if(ReservacionDto.CantidadPasajeros == 0)
		{
			Toast.Notify(new(ToastType.Danger, $"La cantidad de pasajaeros debe ser mayor que 0."));
			await Task.Delay(3000);
			return;
		}
		await CalcularMonto();
		ReservacionDto.EstadoId = 1;
		ReservacionDto.Pago = false;
		GenerarRecibo();
		var crear = await reservacionesServices.Guardar(ReservacionDto);

		if (crear)
		{
			Toast.Notify(new(ToastType.Success, $"La reservacion a sido creada correctamente. Gracias por preferirnos!"));
			await Task.Delay(3000);
			navigationManager.NavigateTo("/");
		}
		else
		{
			Toast.Notify(new(ToastType.Danger, $"La reservacion no ha sido agregada. Favor intentarlo de nuevo."));
		}

	}

	public void Eliminar(ReservacionDetallesDto detalle)
	{
		ReservacionDto.ReservacionDetalles.Remove(detalle);
		DetallesDto.Cantidad = detalle.Cantidad;
		DetallesDto.ArticuloId = detalle.ArticuloId;
	}

	public void GenerarRecibo()
	{
		var monto = ReservacionDto.Monto;
		ReservacionDto.Recibo = $"Usted a reservado el viaje {ViajeDto.Descripcion} para la fecha {ReservacionDto.Fecha:dd/MM/yyyy}, gracias por preferirnos";
	}

}