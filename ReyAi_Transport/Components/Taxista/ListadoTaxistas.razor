@page "/Taxistas/Listado"
@using BlazorBootstrap
@using Blazored.Toast.Services
@rendermode InteractiveServer
@inject TaxistaServices TaxistaService
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />
<link rel="stylesheet" href="/Estilos/Taxista/Table-Taxista.css" />

<div class="overlay">
    <div class="container my-5 listado-taxistas">
        <div class="card p-4 shadow-lg">
            <!-- Título -->
            <div class="text-center mb-4">
                <h1 class="titulo">Listado de Conductores</h1>
            </div>

            <!-- Filtros y búsqueda -->
            <div class="row mb-4 filtros">
                <div class="col-md-8 d-flex align-items-center">
                    <div class="input-group">
                        <InputText class="form-control input-busqueda" @bind-Value="Filtro" placeholder="Buscar por nombre..." />
                        <button class="btn btn-buscar" type="button" @onclick="AplicarFiltro">Buscar</button>
                    </div>
                </div>
                <div class="col-md-1 text-center d-flex align-items-center justify-content-center">
                    <a href="/Taxista/Crear" class="btn btn-sm btn-accion btn-contratar me-2">Crear</a>
                </div>
                <div class="col-md-3 text-md-end">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-disponible" @onclick="MostrarDisponibles">Disponible</button>
                        <button type="button" class="btn btn-ocupado" @onclick="MostrarOcupados">Ocupado</button>
                    </div>
                </div>
            </div>

            <!-- Tabla de taxistas -->
            <div class="table-responsive">
                <table class="table table-striped table-hover tabla-taxistas">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Ciudad</th>
                            <th>Estado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var taxista in ListTaxistas)
                        {
                            <tr>
                                <td>@(taxista.TaxistaId.Length > 10 ? taxista.TaxistaId.Substring(0, 10) : taxista.TaxistaId)</td>
                                <td>@taxista.NickName</td>
                                <td>@taxista.NombreCiudad</td>
                                <td>
                                    <span class="estado @(taxista.EstadoTId == 1 ? "disponible" : "ocupado")">
                                        @(taxista.EstadoTId == 1 ? "Disponible" : "Ocupado")
                                    </span>
                                </td>
                                <td>
                                    <a href="/Taxista/Editar/@taxista.TaxistaId" class="btn btn-sm btn-accion btn-contratar me-2">Editar</a>
                                    <button class="btn btn-sm btn-accion btn-despedir" @onclick="@(() => AbrirModalDespedir(taxista))">Despedir</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal para despedir -->
<div class="modal fade @(MostrarModal ? "show d-block" : "d-none")" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmar Despido</h5>
                <button type="button" class="btn-close" @onclick="CerrarModal"></button>
            </div>
            <div class="modal-body">
                <p>¿Estás seguro de que deseas despedir a <strong>@TaxistaSeleccionado?.NickName</strong>?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="DespedirConfirmado">Despedir</button>
            </div>
        </div>
    </div>
</div>

@code {
    public List<TaxistaDto> ListTaxistas { get; set; } = new();
    public string Filtro { get; set; } = "";
    public TaxistaDto? TaxistaSeleccionado { get; set; }
    public bool MostrarModal { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        ListTaxistas = await TaxistaService.Listar(t => true);
    }

    private async Task AplicarFiltro()
    {
        if (!string.IsNullOrWhiteSpace(Filtro))
        {
            ListTaxistas = await TaxistaService.Listar(p => p.NickName.ToLower()
            .Contains(Filtro.ToLower()));
        }
        else
        {
            ListTaxistas = await TaxistaService.Listar(t => true);
        }
    }

    private async Task MostrarDisponibles()
    {
        ListTaxistas = await TaxistaService.Listar(t => t.EstadoTId == 1);
    }

    private async Task MostrarOcupados()
    {
        ListTaxistas = await TaxistaService.Listar(t => t.EstadoTId != 1);
    }

    private void AbrirModalDespedir(TaxistaDto taxista)
    {
        TaxistaSeleccionado = taxista;
        MostrarModal = true;
    }

    private void CerrarModal()
    {
        MostrarModal = false;
        TaxistaSeleccionado = null;
    }

    private async Task DespedirConfirmado()
    {
        if (TaxistaSeleccionado != null)
        {
            // Lógica para despedir al taxista
            await TaxistaService.Eliminar(TaxistaSeleccionado.TaxistaId);
            ListTaxistas = await TaxistaService.Listar(t => true); // Actualizar la lista
        }
        CerrarModal();
    }
}

    

