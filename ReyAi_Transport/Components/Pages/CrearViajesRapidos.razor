@using ReyAI_Trasport.Data.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
<link rel="stylesheet" href="/Estilos/CrearViaje/StyleCrearViajes.css" />
<EditForm Model="ViajeRapidoDto" method="post" OnValidSubmit="RegistrarViaje" FormName="CrearViajesRapidos">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="cont glass-effect">
        <div class="row">

            <div class="col-3">
                <label class="form-label" for="Destino"><strong>Destino</strong></label>
            </div>
            <div class="col-2">
                <label class="form-label" for="Precio"><strong>Precio</strong></label>
            </div>
            <div class="col-2">
                <label class="form-label" for="Personas"><strong>Personas</strong></label>
            </div>
            <div class="col-3">
                <label class="form-label" for="TaxistaId"><strong>Taxista</strong></label>
            </div>
        </div>
        <div class="row align-items-center">
            @*Destino*@
            <div class="col-3 ml-3">

                <InputSelect id="Destino" class="form-select" @bind-Value="ViajeRapidoDto.DestinoCercaId">
                    <option disabled value="0">Seleccione un destino</option>
                    @foreach (var destino in ListaDestinosCerca)
                    {
                        <option value="@destino.DestinoCercaId">@destino.Descripcion</option>
                    }
                </InputSelect>
            </div>

            @*Precio*@
            <div class="col-2">
                <InputNumber id="Personas" class="form-control" @bind-Value="ViajeRapidoDto.Precio"></InputNumber>
            </div>

            @*Número de personas*@
            <div class="col-2">

                <InputNumber id="Personas" class="form-control" @bind-Value="ViajeRapidoDto.personas"></InputNumber>
            </div>

            @*Taxista*@
            <div class="col-3">

                <InputSelect id="TaxistaId" class="form-select" @bind-Value="ViajeRapidoDto.TaxistaId">
                    <option disabled value="0">Seleccione un taxista</option>
                    @foreach (var taxista in ListaTaxistas)
                    {
                        <option value="@taxista.TaxistaId">@taxista.NickName</option>
                    }
                </InputSelect>
            </div>

            <div class="col-auto">
                <button type="submit" class="btn btn-success">Registrar</button>
            </div>

        </div>
    </div>
</EditForm>


@if (!string.IsNullOrEmpty(Mensaje))
{
    <div class="alert alert-danger">@Mensaje</div>
}


@code {
    [Parameter]
    public List<DestinoCercaDto> ListaDestinosCerca { get; set; } = [];

    [Parameter]
    public List<TaxistaDto> ListaTaxistas { get; set; } = [];

    [Parameter]
    public ViajesRapidosDto? ViajeRapidoDto { get; set; } = new ViajesRapidosDto();

    [Parameter]
    public EventCallback<ViajesRapidosDto> ViajeRegistrado { get; set; }

    // public string? ClienteId { get; set; }
    // public int DestinoCercaId { get; set; }
    // public DateTime Fecha { get; set; } = DateTime.Now;
    // public int EstadoVId { get; set; }
    // public double Precio { get; set; }
    // public int Personas { get; set; }
    // public string? TaxistaId { get; set; }


    public string Mensaje { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await AsignarClienteLogueado();
    }

    private async Task AsignarClienteLogueado()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            ViajeRapidoDto.ClienteId = user.FindFirst("sub")?.Value; // Obtiene el ID del cliente logueado
        }
        else
        {
            Mensaje = "No se encontró un cliente logueado.";
        }
    }

    private async Task RegistrarViaje()
    {
        // if (ViajeRapidoDto.DestinoCercaId == 0 || string.IsNullOrWhiteSpace(ViajeRapidoDto.TaxistaId) || ViajeRapidoDto.Precio <= 0 || ViajeRapidoDto.personas <= 0)
        // {
        //     Mensaje = "Todos los campos son obligatorios.";
        //     return;
        // }
        ViajeRapidoDto.Fecha = DateTime.Now;
        ViajeRapidoDto.EstadoVId = 1;

        var nuevoViaje = new ViajesRapidosDto
            {
                DestinoCercaId = ViajeRapidoDto.DestinoCercaId,
                Fecha = ViajeRapidoDto.Fecha,
                EstadoVId = 1,
                Precio = ViajeRapidoDto.Precio,
                personas = ViajeRapidoDto.personas,
                TaxistaId = ViajeRapidoDto.TaxistaId,
                ClienteId = ViajeRapidoDto.ClienteId
            };

        Mensaje = string.Empty;
        await ViajeRegistrado.InvokeAsync(nuevoViaje);
    }

}

